" Specify the character encoding used in the script. The following lines will
" be converted from [encoding] to the value of the 'encoding' option, if they
" are different.
"
" NOTE: 'encoding' defaults to "latin1" or $LANG
scriptencoding utf-8

" Environment
" Persistent Undo
set undodir=$XDG_DATA_HOME/vim/undo
set undofile " Automatically save undo history to an undo file. Stored in 'undodir'
set directory=$XDG_DATA_HOME/vim/swap " List of dir names for the swap file
set noswapfile " No swapfiles
set backupdir=$XDG_DATA_HOME/vim/backup " List of dir names for the backup file
set viminfo+='1000,n$XDG_DATA_HOME/vim/viminfo

" Leader to <Space>
let mapleader = "\<Space>"

" Turn on file type detection and loading ftplugin and indent files
filetype plugin indent on

" Turn on syntax highlighting
syntax enable

" Set colorscheme
if (has('termguicolors'))
  " Sometimes setting 'termguicolors' is not enough and one has to set the
  " |t_8f| and |t_8b| options explicitly. Default values of these options are
  " '^[[38;2;%lu;%lu;%lum' and '^[[48;2;%lu;%lu;%lum' respectively, but it is
  " only set when `$TERM` is `xterm`.
  let &t_8f="\<Esc>[38;2;%lu;%lu;%lum"
  let &t_8b="\<Esc>[48;2;%lu;%lu;%lum"
  set termguicolors
  set background=dark
  colorscheme nord
endif

" How many whitespace characters a literal \t is worth
set tabstop=8
" How many columnsof whitespace a level of indentation is worth (>, <, ...).
set shiftwidth=2
" How many columns of whitespace a keypress is worth (<Tab>). If negative, use
" the value of shiftwidth
set softtabstop=-1
" Always use spaces instead of tabs
set expandtab
" Insert and delete shiftwidth blanks
set smarttab
" Copy indent from current line when starting a newline
set autoindent
" (Don't) do smart indenting by inserting an extra tab when necessary
set nosmartindent

" When a file has been detected to have been changed outside of Vim and it has
" not been changed inside of Vim, automatically read it again
set autoread

" Don't make a backup before overwriting a file
set nobackup
" Don't make a backup before overwriting a file (this option will delete the
" backup after the file has been written if on)
set nowritebackup

" If this many miliseconds nothing is typed the swap file will be written
" to disk. Also used for the CursorHold autocommand event
set updatetime=200

" Ignore case in search patterns. Also used when searching in the tags file
set ignorecase
" Overrides the 'ignorecase' option if the search pattern contains upper case
" characters
set smartcase

" When opening diffs with `git difftool` git passes the -R flag, making the
" files readonly. This changes the behavior of that so the files always open
" as readable
if &diff
  set noreadonly
endif

" When this option is set, the screen will not be redrawn while executing
" macros, registers and other commands that have not been typed. Also,
" updating the window title is postponed
set lazyredraw

" While typing a search command, show where the pattern, as it was typed so
" far, matches. The matched string is highlighted
set incsearch

" When there is a previous search pattern, highlight all its matches.
"
" When you get bored of looking at the highlightedmatches, you can turn it off
" with :nohlsearch
set hlsearch

" Every wrapped line will continue visually indented (same amount of space as
" the beginning of that line), thus preserving horizontal blocks of text
set breakindent
" sbr: Display the 'showbreak' value before applying the additional indent
set breakindentopt=sbr
" String to put at the start of lines that have been wrapped
set showbreak=↪\  " A comment to keep the space
" When on, lines longer than the width of the window will wrap and displaying
" continues on the next line
set wrap
" If on, Vim will wrap long lines at a character in 'breakat' rather than at
" the last character that fits on the screen
set linebreak

" - c: Auto-wrap comments using textwidth, inserting the current comment
"   leader automatically
" - q: Allow formatting of comments with "gq". Note that formatting will not
"   change blank lines or lines containing only the comment leader. A new
"   paragraph starts after such a line, or when the comment leader changes
" - r: Automatically insert the current comment leader after hitting <Enter>
"   in Insert mode.
" - o: Automatically insert the current comment leader after hitting 'o' or
"   'O' in Normal mode.
" - j: Where it makes sense, remove a comment leader when joining lines
" - a: Automatic formatting of paragraphs. Every time text is inserted or
"   deleted the paragraph will be reformatted. See auto-format. When the 'c'
"   flag is present this only happens for recognized comments
" - n: When formatting text, recognize numbered lists. Thsi actually uses the
"   'formatlistpat' option, this any kind of list can be used. The indent of
"   the text after the number is used for the next line
"
" See https://stackoverflow.com/a/8748154 for the autocommand explanation
augroup FormatOptions
  autocmd!
  autocmd BufNewFile,BufRead * setlocal formatoptions=cqjn
augroup END

" Turn on line numbers
set number
" Change the displayed number to be relative to the cursor. When this option
" and the 'number' option are on, the current line has the real number
set relativenumber

" Show trailing whitespaces
set list

" Trailing whitespace characters and tab characters
set listchars=tab:»·,trail:·

" Number of lines to scroll with CTRL-U and CTRL-D commands. Setting to 0
" means scroll half the window height
set scroll=0

" Better command line autocompletion menu
" When 'wildmenu' is on, command-line completion operates in an enhanced mode
" https://stackoverflow.com/a/13043196
set wildmenu
set wildmode=longest:full,full

" Don't expand certain files
set wildignore=*.o,*.obj,*.bak,*.exe,*.pyc

" Enable mouse support for all modes
if has('mouse')
  set mouse=a
endif

" Split below and to the right
set splitbelow
set splitright

" Enable folding based on indentation
set foldmethod=indent
set foldlevel=99

" Time out when waiting for mappings and key codes (requires timeout == off)
set ttimeout
" The time in ms that is waited for a key code or mapped key sequence to complete
set ttimeoutlen=50

" .  scan the current buffer ('wrapscan' is ignored)
" w  scan buffers from other windows
" b  scan other loaded buffers that are in the buffer list
" u  scan the unloaded buffers that are in the buffer list
" U  scan the buffers that are not in the buffer list
" k  scan the files given with the 'dictionary' option
" kspell  use the currently active spell checking |spell|
" k{dict} scan the file {dict}.  Several "k" flags can be given, patterns are valid too.  For example: >
"                 :set cpt=k/usr/dict/*,k~/spanish
" s  scan the files given with the 'thesaurus' option
" s{tsr}  scan the file {tsr}.  Several "s" flags can be given, patterns are valid too.
" i  scan current and included files
" d  scan current and included files for defined name or macro
" ]  tag completion
" t  same as "]"
set complete=.,w,b,u,t

" Allow backspacing over everything in insert mode
" indent: allow backspacing over autoindent
" eol: allow backspacing over line breaks (join lines)
" start: allow backspacing over the start of insert
set backspace+=indent
set backspace+=eol
set backspace+=start

" Show (partial) command in the last line of the screen
set showcmd

" Characters to fill the statuslines and vertical separators
set fillchars+=vert:│

" Minimal number of columns for the current window (default 20)
set winwidth=90
" Minimal number of rows for the current window (default 1)
set winheight=20
" The minimal height of a window, when it's not the current window. This is a
" hard minimum, windows will never become smaller (default 1, 0-3 reasonable)
set winminheight=3
" The minimal width of a window, when it's not the current window. This is a
" hard minimum, windows will never become smaller (default 1, 0-12 reasonable)
set winminwidth=10

" Always display the status line
set laststatus=2

" Set the contents of the status line
set statusline=[%n]\ %<%.99f
set statusline+=\ %{exists('*FugitiveStatusline')?FugitiveStatusline():''}
set statusline+=%y%h%w%m%r
set statusline+=%{exists('*CapsLockStatusline')?CapsLockStatusline():''}
set statusline+=%{exists('*gutentags#statusline')?gutentags#statusline('[',']'):''}
set statusline+=%=\ %(%l,%c%V%)\ %P

" Quickly echo the full file path
nnoremap <leader>% :let @*=expand("%:p")<CR>:echo expand('%:p')<CR>
nnoremap <leader>5 :let @*=expand("%:p")<CR>:echo expand('%:p')<CR>

" Add new lines without entering insert mode
nnoremap [<Space> :call append(line('.')-1, '')<CR>k
nnoremap ]<Space> :call append(line('.'), '')<CR>j

if executable('rg')
  " Set grepprg for rg
  set grepprg=rg\ --vimgrep
  set grepformat=%f:%l:%c:%m

  let g:ackprg = 'rg --vimgrep'
endif
