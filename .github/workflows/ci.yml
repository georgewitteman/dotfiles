name: CI

"on":
  push:

env:
  DEBIAN_FRONTEND: noninteractive

jobs:
  runners:
    strategy:
      fail-fast: false
      matrix:
        os:
          - macos-13
          - macos-14
          - macos-15
          - ubuntu-22.04
          - ubuntu-24.04
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - run: ./install.sh -t "v$(cat .chezmoiversion)"
      - run: echo "$HOME/.local/bin" >> $GITHUB_PATH
      - uses: extractions/setup-just@v1
        # Docs: In rare circumstances you might get rate limiting errors, this
        # is because this workflow has to make requests to GitHub API in order
        # to list available releases. If this happens you can set the
        # GITHUB_TOKEN environment variable.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: "Run sanity checks"
        run: just verbose=true check

  codespaces:
    strategy:
      fail-fast: false
      matrix:
        image:
          - mcr.microsoft.com/devcontainers/base:alpine
          - mcr.microsoft.com/devcontainers/base:debian
          - mcr.microsoft.com/devcontainers/base:ubuntu
          - mcr.microsoft.com/devcontainers/universal:linux
    runs-on: ubuntu-latest
    container:
      image: ${{ matrix.image }}
      env:
        CODESPACES: true
      options: "--user root"
    steps:
      - uses: actions/checkout@v4
      - run: ./install.sh -t "v$(cat .chezmoiversion)"
      - run: echo "$HOME/.local/bin" >> $GITHUB_PATH
      - uses: extractions/setup-just@v1
        # Docs: In rare circumstances you might get rate limiting errors, this
        # is because this workflow has to make requests to GitHub API in order
        # to list available releases. If this happens you can set the
        # GITHUB_TOKEN environment variable.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - run: just verbose=true check
        # Don't run the checker for the universal container. It has nvs
        # installed which runs `[ -n "${BASH_SOURCE}" ]` which fails when the
        # `nounset` option is on.
        if: ${{ ! contains(matrix.image, 'universal') }}

  lint:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - run: echo "$HOME/.local/bin" >> $GITHUB_PATH
      - uses: actions/checkout@v4
      - uses: extractions/setup-just@v1
        # Docs: In rare circumstances you might get rate limiting errors, this
        # is because this workflow has to make requests to GitHub API in order
        # to list available releases. If this happens you can set the
        # GITHUB_TOKEN environment variable.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - run: 'curl -sS https://webinstall.dev/shfmt | bash'
      - run: 'curl -sS https://webinstall.dev/shellcheck | bash'
      - run: rm -rf ~/.nvm
      - run: ./install.sh
      - run: just verbose=true lint

  misspell:
    name: misspell
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: reviewdog/action-misspell@v1
        with:
          locale: US
          filter_mode: nofilter
          fail_level: error
