#!/usr/bin/env zsh

autoload -U colors && colors

# Stop when any command fails
set -e

source "$HOME/.zshrc"

info() {
  echo "${fg[green]}INFO:${reset_color} $@"
}

set_local_bin_path() {
  export PATH="$HOME/.local/bin:$PATH"
}

setup_yadm_alt_files() {
  echo_run yadm alt
}

bootstrap_platform() {
  if [[ "$OSTYPE" =~ "darwin" ]]; then
    echo_run source bootstrap_macos
  elif command -v pacman >/dev/null 2>&1; then
    echo_run source bootstrap_arch_linux
  else
    info "No platform bootstrap script for $OSTYPE"
  fi
}

install_submodules() {
  echo_run yadm submodule update --recursive --init
}

install_homebrew_zsh() {
  local zsh_path="$(which zsh)"
  if command -v brew >/dev/null 2>&1; then
    zsh_path="$(brew --prefix)/bin/zsh"
  fi
  # -q be quiet
  # -x match the whole line
  # -F pattern is a plain string
  if grep -qxF "$zsh_path" /etc/shells; then
    info "$zsh_path already in /etc/shells"
  else
    info "Adding $zsh_path to /etc/shells"
    info "$zsh_path" | sudo tee -a /etc/shells >/dev/null
  fi
  if [[ "$SHELL" != "$zsh_path" ]]; then
    safe_run chsh -s "$zsh_path"
  else
    info "User '$USER' already has $zsh_path as their shell"
  fi
}

bootstrap_asdf() {
  if ! command -v asdf >/dev/null 2>&1; then
    info "Installing asdf"
    echo_run git clone https://github.com/asdf-vm/asdf.git ~/.asdf
    cd ~/.asdf
    source asdf.sh
    echo_run git checkout "$(git describe --abbrev=0 --tags)"
  else
    info "asdf already installed. Pulling latest version"
    asdf update
  fi

  echo_run asdf plugin-add rust || true
  echo_run asdf plugin-add golang || true
  echo_run asdf install
  echo_run asdf reshim
}

bootstrap_pyenv() {
  if ! command -v pyenv >/dev/null 2>&1; then
    if [[ -d "$HOME/.pyenv" ]]; then
      echo_run cd ~/.pyenv
      echo_run git init
      echo_run git remote add origin https://github.com/pyenv/pyenv.git
      echo_run git fetch
      echo_run git reset origin/master
      echo_run git checkout --track origin/master
      cd
    else
      echo_run git clone https://github.com/pyenv/pyenv.git ~/.pyenv
    fi
  else
    echo_run cd ~/.pyenv
    if [[ ! -d "$HOME/.pyenv/.git" ]]; then
      echo_run git init
      echo_run git remote add origin https://github.com/pyenv/pyenv.git
      echo_run git fetch
      echo_run git reset origin/master
      echo_run git checkout -- "$HOME/.pyenv"
    fi
    echo_run git branch --set-upstream-to=origin/master master
    echo_run git pull
    cd
  fi
  local version versions
  versions=($(<"$HOME/.pyenv/version"))
  for version in $versions; do
    echo_run pyenv install --skip-existing "$version"
  done
}

install_alacritty_terminfo() {
  info "Compiling alacritty terminfo file"
  TMP_DIR=$(mktemp -d)
  cd $TMP_DIR
  echo_run curl -O https://raw.githubusercontent.com/alacritty/alacritty/master/extra/alacritty.info
  echo_run tic -xe alacritty,alacritty-direct alacritty.info
  cd
  rm -rf $TMP_DIR
}

bootstrap_tmux() {
  info "Installing tmux terminfo file"
  echo_run tic -x $XDG_CONFIG_HOME/tmux/tmux.terminfo

  if command -v tmux >/dev/null 2>&1; then
    info "Installing, updating, and cleaning tmux plugins"

    if [ ! -d "${XDG_CONFIG_HOME:-$HOME/.config}/tmux/tpm" ]; then
      echo_run git clone https://github.com/tmux-plugins/tpm \
        "${XDG_CONFIG_HOME:-$HOME/.config}/tmux/tpm"
    fi

    echo_run ${XDG_CONFIG_HOME:-$HOME/.config}/tmux/tpm/bin/install_plugins
    echo_run ${XDG_CONFIG_HOME:-$HOME/.config}/tmux/tpm/bin/update_plugins all
    echo_run ${XDG_CONFIG_HOME:-$HOME/.config}/tmux/tpm/bin/clean_plugins
  else
    info "tmux not installed."
  fi
}

decrypt_yadm_files() {
  if [[ ! -f "$HOME/.ssh/id_rsa" ]]; then
    echo_run yadm decrypt
    echo_run chmod 700 ~/.ssh
    echo_run chmod 600 ~/.ssh/id_rsa
    echo_run chmod 644 ~/.ssh/id_rsa.pub
    echo_run gpg --import ~/.gnupg/.exports/pgp-public-keys.asc
    echo_run gpg --import ~/.gnupg/.exports/pgp-private-keys.asc
    echo_run gpg --import-ownertrust ~/.gnupg/.exports/pgp-ownertrust.asc
  else
    info "The file ~/.ssh/id_rsa already exists."
    info "Skipping decryption. Run 'yadm decrypt && gpg_restore' if necessary."
  fi
}

update_yadm_url_to_ssh() {
  # We now have ssh keys decrypted, so can update the url
  # to be the ssh url
  info "Updating the yadm repo origin URL"
  echo_run yadm remote set-url origin "git@github.com:georgewitteman/dotfiles.git"
}

yadm_pull_rebase() {
  echo_run yadm gitconfig pull.rebase true
}

reminders() {
  echo
  info "REMINDERS:"
  info " - Don't forget to set yadm class for work computer"
  info "     $ yadm config local.class work"
}

sudo echo "$SHELL" > /dev/null
if [[ $status -ne 0 ]]; then
  info "We need sudo to do some stuff"
  return 1
fi

set_local_bin_path
setup_yadm_alt_files
bootstrap_platform
decrypt_yadm_files
update_yadm_url_to_ssh
yadm_pull_rebase
install_submodules
install_homebrew_zsh
bootstrap_asdf
bootstrap_pyenv
install_alacritty_terminfo
bootstrap_tmux

reminders
