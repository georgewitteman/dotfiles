#!/usr/bin/env zsh

local VIM_DIR="${VIM_DIR:-$HOME/.vim}"
local MANIFEST="$VIM_DIR/plugins"
local PLUGINS_DIR="${VIM_PLUGINS_DIR:-$VIM_DIR/pack/mine/start}"
local COMMENT="^ *#"

_edit_manifest() {
  "${EDITOR:-vim}" "$MANIFEST"
}

_get_repo_url() {
  local repo="$1"
  [[ "$repo" = git@github.com:* ]] && echo "$repo" && return
  [[ "$repo" = http://* || "$repo" = https://* ]] && echo "$repo.git" && return
  local slashes="${repo//[^\/]}"
  local count="${#slashes}"
  [ "$count" -eq 1 ] && echo "git@github.com:$repo" && return
  # Otherwise, it's a local repo
}

_install_plugin() {
  local line="$1"
  local plugin_name="${line##*/}"

  if [[ -d "$PLUGINS_DIR/$plugin_name" ]]; then
    echo "$plugin_name: already installed"
    return 1
  fi

  local repo=$(_get_repo_url "$line")
  if [[ -n "$repo" ]]; then
    git clone --depth 1 "$repo" "$PLUGINS_DIR/$plugin_name" >/dev/null 2>&1
  else
    ln -nfs "$line" "$PLUGINS_DIR/$plugin_name"
  fi
  echo "$plugin_name: installed"
}

_install_missing_plugins() {
  (
  # Running this in a subshell because for some reason that's the only way to
  # reliably not have the job notifications show up. I think it might be
  # because the MONITOR option turns on job control, and something about the
  # wait command requires job control to be on to work properly
  for line in "${(@f)"$(<$MANIFEST)"}"; do
    ([[ -z "${line// }" ]] || [[ "$line" =~ "$COMMENT" ]]) && continue
    _install_plugin "$line" &
  done
  wait
  )
  _update_help_tags
}

_uninstall_plugin() {
  local dir="$1"
  [[ -z "$dir" ]] && return 1
  local plugin_name=${dir##*/}
  (grep -v "$COMMENT" "$MANIFEST" | grep -q "$plugin_name") && return 1
  rm -rf "$dir"
  echo "$plugin_name: uninstalled"
}

_uninstall_unwanted_plugins() {
  local did_uninstall=0
  # The '(N)' tells zsh to not error when it doesn't find any directories and
  # the '(/)' tells it to only look for directories
  for dir in $PLUGINS_DIR/*(/N); do
    _uninstall_plugin "$dir"
    [[ "$?" -eq 0 ]] && did_uninstall=1
  done
  [[ "$did_uninstall" -ne 1 ]] && echo "No plugins to uninstall" && return
  _update_help_tags
}

_update_plugin() {
  local dir="$1"
  local plugin_name=${dir##*/}
  if [[ -L "$dir" ]] || [[ ! -d "$dir/.git" ]]; then
    echo "$plugin_name: not updating, local plugin"
    return 1
  fi

  cd "$dir"
  local branch="$(git rev-parse --abbrev-ref --symbolic-full-name HEAD)"

  if [[ "$branch" == "HEAD" ]]; then
    echo "$plugin_name: not updating, detached HEAD"
    return 1
  fi

  local start_commit="$(git rev-parse HEAD)"
  git pull --quiet

  local commits=$(git rev-list --count "$start_commit"..."HEAD")
  [[ "$commits" -eq 0 ]] && echo "$plugin_name: nothing to update" && return 1

  local log="\n$(git log --oneline "$start_commit"..."HEAD")\n"
  echo "$plugin_name: updated $commits commit(s)$log"
}

_update_plugins() {
  (
  # Running this in a subshell because for some reason that's the only way to
  # reliably not have the job notifications show up. I think it might be
  # because the MONITOR option turns on job control, and something about the
  # wait command requires job control to be on to work properly
  #
  # The '(N)' tells zsh to not error when it doesn't find any directories and
  # the '(/)' tells it to only look for directories
  for dir in $PLUGINS_DIR/*(/N); do
    plugin_name=${dir##*/}
    [[ -n "$1" ]] && [[ "$1" != "$plugin_name" ]] && continue
    _update_plugin "$dir" &
  done
  for line in "${(@f)"$(<$MANIFEST)"}"; do
    ([[ -z "${line// }" ]] || [[ "$line" =~ "$COMMENT" ]]) && continue
    local plugin_name=${line##*/}
    [[ -d "$PLUGINS_DIR/$plugin_name" ]] && continue
    _install_plugin "$line" &
  done
  wait
  )
  _update_help_tags
}

_update_help_tags() {
  # -E starts vim in improved ex mode
  # -s starts vim in silent/batch mode, but only when vim was started in ex
  #    mode
  vim -E -s -c 'helptags ALL' -c 'quit'
}

_usage() {
  echo "Vim plugin manager using yadm submodules"
  echo ""
  echo "Usage: $command_name edit"
  echo "       $command_name install"
  echo "       $command_name clean"
  echo "       $command_name update"
  echo "       $command_name help | -h | --help"
  echo ""
  echo "Options:"
  echo "  -h, --help     Show this screen."
  echo ""
}

local command_name="$0"
local action="$1"

case $action in
  edit)
    _edit_manifest
    _install_missing_plugins
    ;;

  install)
    _install_missing_plugins
    ;;

  clean)
    _uninstall_unwanted_plugins
    ;;

  update)
    shift
    _update_plugins
    ;;

  help | --help | -h)
    _usage
    ;;

  *)
    _usage
    return 1
    ;;
esac
