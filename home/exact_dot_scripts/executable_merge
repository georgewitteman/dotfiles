#!/bin/sh

set -o errexit
set -o nounset

USAGE="usage: $(basename "$0") [--remote=origin] [-c|--continue [--no-verify]] [--abort]"

remote="origin"
continue_=false
no_verify=false
abort=false

while [ "$#" -gt 0 ]; do
  case "$1" in
    -[[:alnum:]][[:alnum:]]*)
      # Joined short args (e.g. -abc)
      _value="-${1##-?}"
      _arg="${1%%"${1##-?}"}"
      ;;
    --[[:alnum:]]*=*)
      # Args with values separated by an '=' character
      _value="${1#--[[:alnum:]]*=}"
      _arg="${1%%="${_value}"}"
      ;;
  esac
  if [ -n "${_arg-}${_value-}" ]; then
    shift
    set -- "$_arg" "$_value" "$@"
  fi
  unset _arg _value
  case "$1" in
    -h | --help)
      echo "$USAGE" >&2
      exit
      ;;
    --abort)
      abort=true
      ;;
    -c | --continue)
      continue_=true
      ;;
    --no-verify)
      no_verify=true
      ;;
    --remote)
      if [ -z "$2" ]; then
        echo "error: --remote requires a value" >&2
        exit 1
      fi
      remote="$2"
      ;;
    --)
      shift
      break
      ;;
    -?*)
      echo "unknown option: ${1}" >&2
      exit 1
      ;;
    *) break ;;
  esac
  shift
done

if ! git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
  echo-err "Not in a git repository."
  exit 128
fi

if $abort; then
  echo-run git merge --abort
  exit $?
fi

if $continue_; then
  if ! git rev-parse -q --verify MERGE_HEAD >/dev/null 2>&1; then
    echo-err "Not in an active merge" >&2
    exit 1
  fi
  toplevel="$(git rev-parse --show-toplevel)"
  git add "$toplevel"
  if $no_verify; then
    echo-run git commit --no-edit --no-verify
  else
    echo-run git commit --no-edit
  fi
  exit $?
fi

main_branch="$(get-main-branch)"

echo-run git fetch "$remote" "$main_branch"
echo-run git merge --no-edit "${remote}/${main_branch}"
