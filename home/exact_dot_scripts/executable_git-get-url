#!/bin/sh

set -o errexit

die() {
  [ "$#" -ge 2 ] && echo-err "$2" >&2
  exit "$1"
}

if ! git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
  die 1 "Not a git repository."
fi

git_toplevel="$(git rev-parse --show-toplevel)"
pull_request=false
commit=false
commit_id=

while [ "$#" -gt 0 ]; do
  case "$1" in
    -[[:alnum:]][[:alnum:]]*)
      _value="-${1##-?}"
      _arg="${1%%"${1##-?}"}"
      ;;
  esac
  if [ -n "${_arg-}${_value-}" ]; then
    shift
    set -- "$_arg" "$_value" "$@"
  fi
  unset _arg _value
  case "$1" in
    -h | --help)
      echo "usage: $(basename "$0") [-c|--commit] [--with-commit <commit>] [--pull-request]"
      exit
      ;;
    -c | --commit)
      commit=true
      ;;
    --pull-request)
      commit=true
      pull_request=true
      ;;
    --with-commit)
      if [ $# -lt 2 ]; then
        die 1 "${1} requires a value"
      fi
      commit=true
      commit_id="$(git rev-parse --short "$2")"
      shift
      ;;
    --)
      shift
      break
      ;;
    -?*) die 1 "unknown option: ${1}" ;;
    *)
      if git rev-parse --short "$1" >/dev/null 2>&1; then
        commit=true
        commit_id="$(git rev-parse --short "$1")"
      elif [ -f "$1" ]; then
        commit=true
        if [ -z "$commit_id" ]; then
          commit_id="$(git rev-parse --short HEAD)"
        fi
        path="${1##"${git_toplevel}/"}"
      fi
      ;;
  esac
  shift
done

default_remote="origin"
giturl="$(git ls-remote --get-url "$default_remote")"

if [ -z "$giturl" ]; then
  die 1 "Git remote is not set for ${default_remote}"
fi

case "$giturl" in
  https://*)
    project_url="$(echo "$giturl" | sed "s~\.git~~")"
    ;;
  *)
    project_url="$(echo "$giturl" | sed "s~:~/~" | sed "s~git@~https://~" | sed "s~\.git~~")"
    ;;
esac

if $pull_request; then
  case $project_url in
    *github.com*) ;;
    *)
      die 1 "Can't generate pull request URLs for non-GitHub PRs"
      ;;
  esac
fi

if $commit; then
  if [ -z "$commit_id" ]; then
    commit_id="$(git rev-parse --short HEAD)"
  fi
  if $pull_request; then
    echo "${project_url}/pulls?q=${commit_id}"
    exit
  fi
  if [ -z "$path" ]; then
    echo "${project_url}/commit/${commit_id}"
    exit
  fi
  echo "${project_url}/blob/${commit_id}/${path}"
  exit
fi

echo "$project_url"
