#!/bin/sh

set -o errexit

if ! command -v vim >/dev/null 2>&1; then
  exit
fi

# vimrc hash: {{ include "./exact_dot_vim/vimrc" | sha256sum }}
# installed plugins: {{ glob (joinPath .chezmoi.homeDir ".vim/plugged") | join "\n" | sha256sum }}

# -e: Start Vim in Ex mode, just like the executable was called "ex".
# -s: Silent mode. Only when started as "Ex" or when the "-e" option was given before the "-s" option.
# --cmd: Like using "-c", but the command is executed just before processing any
#        vimrc file. You can use up to 10 of these commands, independently from "-c"
#        commands.
# -c: {command} will be executed after the first file has been read. {command}
#     is interpreted as an Ex command. If the {command} contains spaces it must be
#     enclosed in double quotes (this depends on the shell that is used). Example:
#     vim "+set si" main.c Note: You can use up to 10 "+" or "-c" commands.
# -u: Use the commands in the file {vimrc} for initializations. All the other
#     initializations are skipped. Use this to edit a special kind of files. It can
#     also be used to skip all initializations by giving the name "NONE". See
#     ":help initialization" within vim for more details.
# -i: Specifies the filename to use when reading or writing the viminfo file,
#     instead of the default "~/.viminfo". This can also be used to skip the use of
#     the .viminfo file, by giving the name "NONE".
# -V: Verbose. Give messages about which files are sourced and for reading and
#     writing a viminfo file. The optional number N is the value for 'verbose'.
#     Default is 10.
# https://github.com/junegunn/vim-plug/wiki/tips#install-plugins-on-the-command-line
#
# PlugClean! will return a non-zero status code in some cases
vim -es -u "${HOME}/.vim/vimrc" -i NONE -c "PlugClean!" -c "quitall" || true
vim -es -u "${HOME}/.vim/vimrc" -i NONE -c "PlugInstall" -c "quitall"
