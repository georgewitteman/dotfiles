#!/bin/sh

# Visual Studio Code only loads the profile once at startup. So, if I install
# my dotfiles in an already loaded session, it will not run the ~/.profile
# script again (so custom scripts, etc. aren't available). In the ~/.profile
# file, I set the $ENV variable (which doesn't seem to normally be set).
# Therefore, I can use that as a sanity check to see whether the ~/.profile
# script has been sourced, and if not, source it here manually.
#
# This also relies on the fact that nothing is really happening in
# ~/.bash_profile or ~/.zprofile.
if [ -z "$ENV" ]; then
  . "${HOME}/.profile"
fi

if [ -f "${HOME}/.config/op/plugins.sh" ]; then
  # shellcheck disable=SC1091
  . "${HOME}/.config/op/plugins.sh"
fi

# I'm putting this near the top because sometimes other stuff in this script
# breaks while I'm testing it and then restart_shell isn't loaded and I have to
# remember what this actually does.
alias resh="restart_shell"
restart_shell() {
  # shellcheck disable=SC2312
  if [ -n "$(jobs)" ]; then
    echo "Current shell has backgrounded jobs. Not restarting ${1}"
    return 1
  fi

  # Note: You can't use $0 here since it will be the name of the function, not
  # the shell.
  if [ $# -eq 0 ]; then
    if [ -f "/proc/$$/cmdline" ]; then
      # shellcheck disable=SC2312
      set -- "$(tr '\0' ' ' <"/proc/$$/cmdline" | cut -d ' ' -f 1)"
    else
      # shellcheck disable=SC2312
      set -- "$(ps -p $$ -o comm | tail -1)"
    fi
  fi
  set -- "${1#-}" -li

  # https://github.com/zsh-users/zsh/blob/8e1c6ed6bf416e7716b4c6d5c6822ec752db7b36/Completion/compinit#L133
  if [ -f "${ZDOTDIR:-$HOME}/.zcompdump" ]; then
    echo_run rm "${ZDOTDIR:-$HOME}/.zcompdump"
  fi

  echo_run exec "$@"
}

autoload_script() {
  # usage: autoload_script func_name /path/to/func_name

  # The outer eval is needed so that the args to autoload_script can be used by
  # the inner function. The inner function (the one created by the outer eval)
  # is needed so that `$(cat $2)` isn't called immediately when
  # `autoload_script` is called. We want `cat` to only be called the first time
  # the the function with the name defined by $1 is called. The inner eval
  # creates the function with the actual body and runs it once. This means that
  # the first time the function is called, it will load in the actual function
  # body and create a new function (with the same name) with the actual
  # business logic. Afterwards the function is fully loaded.
  #
  # Another thing to note is that the inner eval needs to have the `$(cat $2)`
  # as a double quoted argument. This is so that the output of the command (the
  # function/script implementation) is treated as an argument. If it's not, any
  # quotes in the function/script implementation risk closing the quotes in the
  # code that is being `eval`d, leading to weird bugs. For example:
  # - eval 'foo() { #!/bin/sh
  #   echo 'bar || baz'
  #   }'
  # This is an overly simplistic example, but you can see how the first single
  # quote on line 2 will actually end the string that is the first argument to
  # eval. The `||` will then be treated as a real or (i.e. `echo ... || baz
  # ...`) instead of as part of the string 'bar || baz'.
  eval "${1}() {
    eval \"
      ${1}() {
        \$(cat ${2})
      }
    ${1} \\\"\\\$@\\\"\"
  }"
}

autoload_script echo_eval "${HOME}/.scripts/echo-eval"
autoload_script safe_eval "${HOME}/.scripts/safe-eval"
autoload_script echo_run "${HOME}/.scripts/echo-run"
autoload_script safe_run "${HOME}/.scripts/safe-run"

# -O: True if file exists and its owner matches the effective user id of this
# process.
if [ -d "$HOMEBREW_PREFIX" ] && [ ! -O "$HOMEBREW_PREFIX" ] && command -v sudo >/dev/null 2>&1; then
  if stat -c '%U' "$HOMEBREW_PREFIX" >/dev/null 2>&1; then
    brew_user="$(stat -c '%U' "$HOMEBREW_PREFIX")"
  else
    brew_user="$(stat -f '%Su' "$HOMEBREW_PREFIX")"
  fi
  if [ -n "$brew_user" ]; then
    # shellcheck disable=SC2139
    alias brew="echo-run sudo --set-home --user=${brew_user} brew"
  fi
  unset brew_user
fi

# Fixes gpg when "GPG Suite" is not installed (i.e. gpg is installed from homebrew)
#
# From the Docs
# =============
#
# You should always add the following lines to your .bashrc or whatever
# initialization file is used for all shell invocations:
#
#     GPG_TTY=$(tty)
#     export GPG_TTY
#
# It is important that this environment variable always reflects the output of
# the tty command.  For W32 systems this option is not required.
if [ -z "$GPG_TTY" ]; then
  if [ -n "$TTY" ]; then
    GPG_TTY="$TTY"
  else
    GPG_TTY="$(tty || true)"
  fi
fi
export GPG_TTY

# Without this, fzf ignores hidden files.
if [ -z "$FZF_DEFAULT_COMMAND" ]; then
  # --hidden: include hidden files
  # --exclude '.git': .git is usually not in .gitignore, and we're showing
  #   hidden files, so it needs to be explicitly ignored here
  # --strip-cwd-prefix: don't display ./ at the beginning of each file
  if command -v fd >/dev/null 2>&1; then
    export FZF_DEFAULT_COMMAND="fd --hidden --exclude .git --strip-cwd-prefix"
  elif command -v fdfind >/dev/null 2>&1; then
    export FZF_DEFAULT_COMMAND="fdfind --hidden --exclude .git"
  fi
fi

# `man ls`: auto will make ls output escape sequences based on termcap(5), but
# only if stdout is a tty and either the -G flag is specified or the COLORTERM
# environment variable is set and not empty.
export COLORTERM='true'
alias ls='ls --color=auto'
alias ll='ls -l'
alias la='ls -la'

if ! command -v sudoedit >/dev/null; then
  alias sudoedit='sudo --edit'
fi

alias gs='echo_run git status'
alias gb='git-branch'

alias tf="terraform"

# work
alias yws="yarn workspace server"
# /work

take() {
  # shellcheck disable=SC2164
  mkdir -p "$1" && cd "$1"
}

tmp() {
  # shellcheck disable=SC2312
  set -- "${TMPDIR:-"$(mktemp -d)/"}$(date +%Y-%m-%dT%H%M%S)"
  echo_run mkdir -p "$1"
  echo_run cd "$1"
}

dotfiles() {
  if [ $# -eq 0 ]; then
    command dotfiles
    return $?
  fi
  case "$1" in
    'cd')
      shift
      if command -v deactivate >/dev/null 2>&1; then
        # When going from some directory where I have a venv activated to the
        # dotfiles directory, I almost never want to actually stay in that
        # virtual environment and have to run `deactivate` manually.
        echo_run deactivate
      fi
      echo_run cd "$(chezmoi git -- rev-parse --show-toplevel || true)"
      ;;
    *)
      command dotfiles "$@"
      ;;
  esac
}

if ! command -v tailscale >/dev/null 2>&1; then
  if [ -x "/Applications/Tailscale.app/Contents/MacOS/Tailscale" ]; then
    tailscale() {
      echo_run "/Applications/Tailscale.app/Contents/MacOS/Tailscale" "$@"
    }
  fi
fi

if [ "$(id -u || true)" -eq 0 ]; then
  PS1='$PWD # '
else
  PS1='$PWD $ '
fi
PS2='> '
PS4='+ '
