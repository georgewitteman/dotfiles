" Specify the character encoding used in the script. The following lines will
" be converted from [encoding] to the value of the 'encoding' option, if they
" are different.
"
" NOTE: 'encoding' defaults to "latin1" or $LANG
scriptencoding utf-8

if has('nvim')
  if ! executable($HOME.'/.config/nvim/venv3/bin/python') && executable('python3')
    execute '!python3 -m venv '.$HOME.'/.config/nvim/venv3'
    execute '!'.$HOME.'/.config/nvim/venv3/bin/python -m pip install -r '.$HOME.'/.config/nvim/requirements.txt'
  endif

  if executable($HOME.'/.config/nvim/venv3/bin/python')
    let g:python3_host_prog = $HOME.'/.config/nvim/venv3/bin/python'
  endif
endif

" See `:h defaults.vim`: If you create your own .vimrc, it is
" recommended to add these lines somewhere near the top
unlet! skip_defaults_vim
source $VIMRUNTIME/defaults.vim

call plug#begin()
" The default plugin directory will be as follows:
"   - Vim (Linux/macOS): '~/.vim/plugged'
"   - Vim (Windows): '~/vimfiles/plugged'
"   - Neovim (Linux/macOS/Windows): stdpath('data') . '/plugged'
" You can specify a custom plugin directory by passing it as the argument
"   - e.g. `call plug#begin('~/.vim/plugged')`
"   - Avoid using standard Vim directory names like 'plugin'

" Enables useful syntax highlighting for .tmpl and other chezmoi files
" Temporarily pinning the version to resolve
" https://github.com/georgewitteman/dotfiles/actions/runs/3437841248/jobs/5733133559
Plug 'alker0/chezmoi.vim', { 'commit': 'c4a6024ffb999c798ce1698c615bf228e6333c52' }

" Add git plugins if git is installed
if executable('git')
  Plug 'tpope/vim-fugitive'
  Plug 'tpope/vim-rhubarb'
endif

" Add fzf plugins if fzf is installed
if executable('fzf')
  Plug 'junegunn/fzf'
  Plug 'junegunn/fzf.vim'
endif

" This assumes that if I'm using Apple_Terminal then I don't have the correct
" ctags version installed
if $TERM_PROGRAM != "Apple_Terminal"
  Plug 'ludovicchabant/vim-gutentags'
endif

" "Yaml files in vim 7.4 are really slow, due to core yaml syntax. This syntax
" is simpler/faster." - stephpy/vim-yaml/README.md
Plug 'stephpy/vim-yaml'

" Adds better python syntax highlighting (e.g. indent errors, exception
" classes, builtins, etc.)
Plug 'hdima/python-syntax'

" Use proper indentation formatting for python
Plug 'Vimjas/vim-python-pep8-indent'

" Adds support for justfile syntax
Plug 'NoahTheDuke/vim-just'

" Better text
Plug 'reedes/vim-pencil'

" Improved incremental search
Plug 'haya14busa/is.vim'

" A better (and faster) file manager than netrw
Plug 'justinmk/vim-dirvish'

" Strips whitespace when closing files
Plug 'ntpeters/vim-better-whitespace'

" Adds capslock shortcut
Plug 'tpope/vim-capslock'

" Shortcuts for commenting out lines/blocks of lines
Plug 'tpope/vim-commentary'

" Adds `:Make` for asynchronous makes
Plug 'tpope/vim-dispatch'

" Allows repeating non-default shortcuts
Plug 'tpope/vim-repeat'

" Adds shortcuts for surrounding items with things
Plug 'tpope/vim-surround'

" Support for the Prisma ORM
Plug 'pantharshit00/vim-prisma'

" Support for clipboard over SSH via ANSI OSC52 sequence
Plug 'ojroques/vim-oscyank'

" TOML syntax support
Plug 'cespare/vim-toml'

" Support for terraform files
Plug 'hashivim/vim-terraform'

" Initialize plugin system
" - Automatically executes `filetype plugin indent on` and `syntax enable`.
call plug#end()
" You can revert the settings after the call like so:
"   filetype indent off   " Disable file-type-specific indentation
"   syntax off            " Disable syntax highlighting

" Leader to <Space>
let mapleader = "\<Space>"

" How many whitespace characters a literal \t is worth
set tabstop=8
" How many columnsof whitespace a level of indentation is worth (>, <, ...).
set shiftwidth=2
" How many columns of whitespace a keypress is worth (<Tab>). If negative, use
" the value of shiftwidth
set softtabstop=-1
" Always use spaces instead of tabs
set expandtab
" Insert and delete shiftwidth blanks
set smarttab
" Copy indent from current line when starting a newline
set autoindent
" (Don't) do smart indenting by inserting an extra tab when necessary
set nosmartindent

" When a file has been detected to have been changed outside of Vim and it has
" not been changed inside of Vim, automatically read it again
set autoread

" If this many miliseconds nothing is typed the swap file will be written
" to disk. Also used for the CursorHold autocommand event
set updatetime=200

" Ignore case in search patterns. Also used when searching in the tags file
set ignorecase
" Overrides the 'ignorecase' option if the search pattern contains upper case
" characters
set smartcase

" When opening diffs with `git difftool` git passes the -R flag, making the
" files readonly. This changes the behavior of that so the files always open
" as readable
if &diff
  set noreadonly
endif

" When this option is set, the screen will not be redrawn while executing
" macros, registers and other commands that have not been typed. Also,
" updating the window title is postponed
set lazyredraw

" While typing a search command, show where the pattern, as it was typed so
" far, matches. The matched string is highlighted
set incsearch

" When there is a previous search pattern, highlight all its matches.
"
" When you get bored of looking at the highlightedmatches, you can turn it off
" with :nohlsearch
set hlsearch

" Every wrapped line will continue visually indented (same amount of space as
" the beginning of that line), thus preserving horizontal blocks of text
set breakindent
" sbr: Display the 'showbreak' value before applying the additional indent
set breakindentopt=sbr
" String to put at the start of lines that have been wrapped
set showbreak=↪\  " A comment to keep the space
" When on, lines longer than the width of the window will wrap and displaying
" continues on the next line
set wrap
" If on, Vim will wrap long lines at a character in 'breakat' rather than at
" the last character that fits on the screen
set linebreak

" - c: Auto-wrap comments using textwidth, inserting the current comment
"   leader automatically
" - q: Allow formatting of comments with "gq". Note that formatting will not
"   change blank lines or lines containing only the comment leader. A new
"   paragraph starts after such a line, or when the comment leader changes
" - r: Automatically insert the current comment leader after hitting <Enter>
"   in Insert mode.
" - o: Automatically insert the current comment leader after hitting 'o' or
"   'O' in Normal mode.
" - j: Where it makes sense, remove a comment leader when joining lines
" - a: Automatic formatting of paragraphs. Every time text is inserted or
"   deleted the paragraph will be reformatted. See auto-format. When the 'c'
"   flag is present this only happens for recognized comments
" - n: When formatting text, recognize numbered lists. Thsi actually uses the
"   'formatlistpat' option, this any kind of list can be used. The indent of
"   the text after the number is used for the next line
"
" See https://stackoverflow.com/a/8748154 for the autocommand explanation
augroup FormatOptions
  autocmd!
  autocmd BufNewFile,BufRead * setlocal formatoptions=cqjn
augroup END

" Turn on line numbers
set number
" Change the displayed number to be relative to the cursor. When this option
" and the 'number' option are on, the current line has the real number
set relativenumber

" Show trailing whitespaces
set list

" Trailing whitespace characters and tab characters
set listchars=tab:»·,trail:·

" Number of lines to scroll with CTRL-U and CTRL-D commands. Setting to 0
" means scroll half the window height
set scroll=0

" Better command line autocompletion menu
" When 'wildmenu' is on, command-line completion operates in an enhanced mode
" https://stackoverflow.com/a/13043196
set wildmenu
set wildmode=longest:full,full

" Don't expand certain files
set wildignore=*.o,*.obj,*.bak,*.exe,*.pyc

" Enable mouse support for all modes
if has('mouse')
  set mouse=a
endif

" Reselect visual block after indent/outdent
vnoremap < <gv
vnoremap > >gv

" Turn off bells
set novisualbell
set noerrorbells

" Split below and to the right
set splitbelow
set splitright

" Enable folding based on indentation
set foldmethod=indent
set foldlevel=99

" Time out when waiting for mappings and key codes (requires timeout == off)
set ttimeout
" The time in ms that is waited for a key code or mapped key sequence to complete
set ttimeoutlen=50

" .  scan the current buffer ('wrapscan' is ignored)
" w  scan buffers from other windows
" b  scan other loaded buffers that are in the buffer list
" u  scan the unloaded buffers that are in the buffer list
" U  scan the buffers that are not in the buffer list
" k  scan the files given with the 'dictionary' option
" kspell  use the currently active spell checking |spell|
" k{dict} scan the file {dict}.  Several "k" flags can be given, patterns are valid too.  For example: >
"                 :set cpt=k/usr/dict/*,k~/spanish
" s  scan the files given with the 'thesaurus' option
" s{tsr}  scan the file {tsr}.  Several "s" flags can be given, patterns are valid too.
" i  scan current and included files
" d  scan current and included files for defined name or macro
" ]  tag completion
" t  same as "]"
set complete=.,w,b,u,t

" Allow backspacing over everything in insert mode
" indent: allow backspacing over autoindent
" eol: allow backspacing over line breaks (join lines)
" start: allow backspacing over the start of insert
set backspace+=indent
set backspace+=eol
set backspace+=start

" Show (partial) command in the last line of the screen
set showcmd

" Characters to fill the statuslines and vertical separators
set fillchars+=vert:│

" Minimal number of columns for the current window (default 20)
set winwidth=70
" Minimal number of rows for the current window (default 1)
set winheight=10
" The minimal height of a window, when it's not the current window. This is a
" hard minimum, windows will never become smaller (default 1, 0-3 reasonable)
" FIXME: Commented out to fix issue on raspberry pi under neovim
" set winminheight=3
" The minimal width of a window, when it's not the current window. This is a
" hard minimum, windows will never become smaller (default 1, 0-12 reasonable)
set winminwidth=10

" Always display the status line
set laststatus=2

" Set the contents of the status line
set statusline=[%n]\ %<%.99f
set statusline+=\ %{exists('*FugitiveStatusline')?FugitiveStatusline():''}
set statusline+=%y%h%w%m%r
set statusline+=%{exists('*CapsLockStatusline')?CapsLockStatusline():''}
set statusline+=%{exists('*gutentags#statusline')?gutentags#statusline('[',']'):''}
set statusline+=%=\ %(%l,%c%V%)\ %P

" Quickly echo the full file path
function! RelativePathname()
  let path = fnamemodify(expand("%"), ":~:.")
  if path != ''
    return path
  endif
  return expand("%")
endfunction
nnoremap <leader>% :let @c=RelativePathname()<CR>:OSCYankReg c<CR>:echo RelativePathname()<CR>
nnoremap <leader>5 :let @c=RelativePathname()<CR>:OSCYankReg c<CR>:echo RelativePathname()<CR>


" Add new lines without entering insert mode
nnoremap [<Space> :call append(line('.')-1, '')<CR>k
nnoremap ]<Space> :call append(line('.'), '')<CR>j

if executable('rg')
  " Set grepprg for rg
  set grepprg=rg\ --vimgrep
  set grepformat=%f:%l:%c:%m

  let g:ackprg = 'rg --vimgrep'
endif

" Default to treating /bin/sh as POSIX shell (not the super duper old bourne
" shell)
let g:is_posix = 1

" Dockerfiles load vim-json which sets conceallevel. We don't want that
let g:vim_json_syntax_conceal = 0

" Disable netrw
let loaded_netrwPlugin = 1

" Sort directories at the top of dirvish
" let g:dirvish_mode = ':sort ,^.*[\/],'
" If you use |g:dirvish_relative_paths|, try this
let g:dirvish_mode = ':sort ,^\v(.*[\/])|\ze,'

" List paths relative to the |current-directory|. (Recommended for Vim 7.3
" because it lacks |conceal|).
let g:dirvish_relative_paths = 1

let g:better_whitespace_enabled = 0 " Disable highlighting
let g:strip_whitespace_on_save = 1
let g:strip_whitespace_confirm = 0 " Don't ask for confirmation
let g:strip_whitelines_at_eof = 1 " Strip white lines at end of file

" Don't add tags file to home directory
let g:gutentags_exclude_project_root = ['/usr/local', $HOME]
if executable('project-ctags-files')
  let g:gutentags_file_list_command = 'project-ctags-files'
elseif executable('project-find')
  let g:gutentags_file_list_command = 'project-find'
endif

command! -bang -nargs=* Rg
      \ call fzf#vim#grep("rg --column --line-number --no-heading --color=always --smart-case --hidden --glob '!.git'-- ".shellescape(<q-args>),
      \ 1,
      \ fzf#vim#with_preview(),
      \ <bang>0)

" Run in every buffer
let g:hardtime_default_on = 1

let g:list_of_normal_keys = ['h', 'j', 'k', 'l', '+', '<UP>', '<DOWN>', '<LEFT>', '<RIGHT>']
let g:list_of_visual_keys = ['h', 'j', 'k', 'l', '+', '<UP>', '<DOWN>', '<LEFT>', '<RIGHT>']
let g:list_of_insert_keys = ['<UP>', '<DOWN>', '<LEFT>', '<RIGHT>']
let g:list_of_disabled_keys = []

" The quickfix window cannot be added to the ignore buffers array
let g:hardtime_ignore_quickfix = 1

" Ignore certain buffer patterns
let g:hardtime_ignore_buffer_patterns = [ "dirvish" ]

" Maximum number of repetative key preses
let g:hardtime_maxcount = 2

augroup pencil
  autocmd!
  autocmd FileType markdown,mkd call pencil#init({'wrap': 'soft'})
  autocmd Filetype git,gitsendemail,*commit*,*COMMIT* call pencil#init({'wrap': 'soft'})
  autocmd FileType arcanist* call pencil#init({'wrap': 'soft'})
  autocmd FileType html call pencil#init({'wrap': 'soft'})
augroup END

" Allow vim-terraform to automatically format *.tf and *.tfvars files with
" terraform fmt.
let g:terraform_fmt_on_save=1

" Allow vim-terraform to align settings automatically with Tabularize.
" Requires the 'godlygeek/tabular' plugin
let g:terraform_align=1

" Config for the hdima/python-syntax plugin
"
" Highlight syntax of str.format syntax
let g:python_highlight_string_format = 1
" Highlight standard exceptions
let g:python_highlight_exceptions = 1
" Highlight indentation errors
let g:python_highlight_indent_errors = 1
" Highlight all operators
" let g:python_highlight_operators = 1
" Highlight builtin objects, types, and functions
let g:python_highlight_builtins = 1
