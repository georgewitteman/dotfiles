#!/usr/bin/env zsh
# Load Order         Interactive  Interactive  Script
# Startup            Only login   Always
# ------------------ -----------  -----------  ------
# /etc/zshenv             1            1         1
# $ZDOTDIR/.zshenv        2            2         2
# /etc/zprofile           3
# $ZDOTDIR/.zprofile      4
# /etc/zshrc              5            3
# $ZDOTDIR/.zshrc         6            4
# /etc/zlogin             7
# $ZDOTDIR/.zlogin        8
#
# Shutdown
# ------------------ -----------  -----------  ------
#   ~/.zlogout            9
# /etc/zlogout           10
#
# Note: ZSH seems to read ~/.profile as well, if ~/.zshrc is not present.
# `.zprofile' is meant as an alternative to `.zlogin' for ksh fans; the two are
# not intended to be used together

# http://zsh.sourceforge.net/Intro/intro_3.html
# `.zshrc' is sourced in interactive shells. It should contain commands to set
# up aliases, functions, options, key bindings, etc.

# ----- NOTES FROM DOCUMENTATION ----------------------------
#
# WHY USE [[ ]] INSTEAD OF [ ]: Second aside for users of sh: you may remember
# that tests in sh used a single pair of brackets, `if [ ... ]; then ...', or
# equivalently as a command called test, `if test ...; then ...'. The Korn
# shell was deliberately made to be different, and zsh follows that. The reason
# is that `[[' is treated specially, which allows the shell to do some extra
# checks and allows more natural syntax. For example, you may know that in sh
# it's dangerous to test a parameter which may be empty: `[ $var = foo ]' will
# fail if $var is empty, because in that case the word is missed out and the
# shell never knows it was supposed to be there; with `[[ ... ]]', this is
# quite safe because the shell is aware there's a word before the `=', even if
# it's empty. Also, you can use `&&' and `||' to mean logical `and' and `or',
# which agrees with the usual UNIX/C convention; in sh, they would have been
# taken as starting a new command, not as part of the test, and you have to use
# the less clear `-a' and `-o'. Actually, zsh provides the old form of test for
# backward compatibility, but things will work a lot more smoothly if you don't
# use it.
#
# STARTUP FILE ORDER AND PURPOSE: Certain options from earlier startup files
# can prevent later startup files from running
#  - /etc/zshenv: Always run for every zsh
#  - ~/.zshenv: Usually run for every zsh
#  - /etc/profile: Run for login shells
#  - ~/.zprofile: Run for login shells
#  - /etc/zshrc: Run for interactive shells
#  - ~/.zshrc: Run for interactive shells
#  - /etc/zlogin: Run for login shells
#  - ~/.zlogin: Run for login shells

# Leaving this here so other install scripts think that it's here, since I'm
# setting the path manually.
# ====================
# if command -v pyenv 1>/dev/null 2>&1; then
#   eval "$(pyenv init - --no-rehash zsh)"
# fi
# ====================

# Leave this here so that the snowsql installer thinks that it's already here
# and doesn't add the path. The bootstrap script that installs snowsql links
# the binary to /usr/local/bin/snowsql.
# ====================
# added by Snowflake SnowSQL installer v1.2
# ====================

typeset -U path fpath

# Locale setup
export LC_ALL="en_US.UTF-8"
export LANG="en_US.UTF-8"

# Correctly display UTF-8 with combining characters.
setopt COMBINING_CHARS

if [[ -d "${HOME}/.local/bin" ]]; then
  path=("${HOME}/.local/bin" "${path[@]}")
fi

if ! command -v fzf &>/dev/null && [[ -d "/usr/local/opt/fzf/bin" ]]; then
  path=("/usr/local/opt/fzf/bin" "${path[@]}")
fi

if [[ -d "${HOME}/.phabricator/arcanist/bin" ]]; then
  path=("${HOME}/.phabricator/arcanist/bin" "${path[@]}")
fi

# Rust
if [[ -d "${HOME}/.cargo/bin" ]]; then
  path=("${HOME}/.cargo/bin" "${path[@]}")
fi

# Set up fpath for my autoloaded functions
fpath=("${XDG_CONFIG_HOME:-${HOME}/.config}/zsh/functions/" "${fpath[@]}")
autoload -Uz ${XDG_CONFIG_HOME:-${HOME}/.config}/zsh/functions/*

zplug add git@github.com:georgewitteman/zsh-prompt.git || true
zplug add git@github.com:georgewitteman/zsh-yavm.git || true
zplug init

yavm init pyenv nodejs golang
preexec_functions+=(yavm_set_path)

if [[ -n "$VIRTUAL_ENV" ]]; then
  # Allows you to `rc` (reload config, see aliases below) from inside a virtual
  # environment without losing the virtual environment. Normally `exec` keeps
  # all environment variables, but certain ones get overwritten during zsh
  # initialization. This reinitializes them. Keep this after anything else that
  # sets the path.
  source "$VIRTUAL_ENV/bin/activate"
fi

export EDITOR="vim"

export CLICOLOR=1
export LSCOLORS="exfxcxdxbxegedabagacad"
export LS_COLORS="di=34:ln=35:so=32:pi=33:ex=31:bd=34;46:cd=34;43:su=30;41:sg=30;46:tw=30;42:ow=30;43"

# Fixes gpg when "GPG Suite" is not installed (i.e. gpg is installed from homebrew)
export GPG_TTY="$TTY"

# This affects every invocation of `less`.
#
#   -i   case-insensitive search unless search string contains uppercase letters
#   -R   color
#   -F   exit if there is less than one page of content
#   -X   keep content on screen after exit
#   -M   show more info at the bottom prompt line
#   -x4  tabs are 4 instead of 8
export LESS=-iRFXMx4

export PAGER=less

# See ~/.local/bin/echo-eval for a description of this variable. We need to
# unset it here whenever the shell resets
unset ECHO_EVAL_LEVEL

# Paste in a git repository url and it will automatically clone it
alias -s git='clone'

alias make-venv='python3 -m venv .venv'
alias make-venv2='virtualenv .venv'
alias activate='activate-venv .venv'

alias rc="echo-run restart-zsh"

# Tmux sessions
alias default="new-or-switch-tmux default ${HOME}"
alias misc='default'

if [[ -z "$TMUX" && "$TERM" = "alacritty" ]]; then
  # Always open tmux when starting Alacritty
  default
fi

if ! command -v sudoedit &>/dev/null; then
  alias sudoedit='sudo -e'
fi

# Always use local package jest
if command -v yarn &>/dev/null; then
  alias jest='yarn run jest'
fi

# -F adds characters to indicate what kind of file it is (e.g. "/" for directories)
alias ls='ls -F'
alias ll='ls -l'
alias la='ls -la'

if command -v git &>/dev/null; then
  git() {
    if [[ $# -gt 0 ]]; then
      command git "$@"
    else
      command git status
    fi
  }
  alias g='git'
  alias gs='echo-run status'
  alias gb='git-branch'
  alias develop='master'
  alias switch='echo-run git switch'
  alias restore='echo-run git restore'
  alias fetch='echo-run git fetch'
  alias commit='echo-run git commit'
  alias pull='echo-run git pull'
  alias status='echo-run git status'
fi

if command -v arc &>/dev/null; then
  alias arc-lint="echo-run arc lint --apply-patches"
  alias arc-rebase='rebase && arc-diff -am "Rebase"'
fi

if command -v shfmc &>/dev/null; then
  alias my-shfmt="shfmt -i 2 -w -ci"
fi

# 1Password
if command -v op &>/dev/null; then
  alias op-signin="echo-eval 'eval \"\$(op signin)\"'"
fi

alias c='clear'

if command -v brew &>/dev/null; then
  brew() {
    if [[ -n "$VIRTUAL_ENV" ]]; then
      echo-warn "Don't run brew from inside a venv. https://docs.brew.sh/Homebrew-and-Python"
      return 1
    fi
    command brew "$@"
    typeset retval="$?"
    [[ "$1" = "install" || "$1" = "upgrade" || "$1" = "uninstall" ]] && zplug reinit
    return $retval
  }
  alias brew-upgrade='echo-run brew upgrade --ignore-pinned --display-times'
fi

# Setting these as functions so they're available in autloaded functions that
# were autoloaded with the -U flag
autoload-script "${HOME}/.local/bin/echo-eval"
autoload-script "${HOME}/.local/bin/echo-run"
autoload-script "${HOME}/.local/bin/safe-run"

alias echo-path="echo-array path"
alias echo-fpath="echo-array fpath"

# Color variables
() {
  local lc=$'\e[' rc=m k
  typeset -A color
  color=(
    [none]=00           [bold]=01
    [fg-black]=30       [bg-black]=40
    [fg-red]=31         [bg-red]=41
    [fg-green]=32       [bg-green]=42
    [fg-yellow]=33      [bg-yellow]=43
    [fg-blue]=34        [bg-blue]=44
    [fg-magenta]=35     [bg-magenta]=45
    [fg-cyan]=36        [bg-cyan]=46
    [fg-white]=37       [bg-white]=47
    [fg-default]=39     [bg-default]=49
    [fg-brblack]=90     [bg-brblack]=100
    [fg-brred]=91       [bg-brred]=101
    [fg-brgreen]=92     [bg-brgreen]=102
    [fg-bryellow]=93    [bg-bryellow]=103
    [fg-brblue]=94      [bg-brblue]=104
    [fg-brmagenta]=95   [bg-brmagenta]=105
    [fg-brcyan]=96      [bg-brcyan]=106
    [fg-brwhite]=97     [bg-brwhite]=107
  )

  typeset -Hg reset_color bold_color
  reset_color="$lc${color[none]}$rc"
  bold_color="$lc${color[bold]}$rc"

  typeset -AHg fg fg_bold
  for k in ${(k)color[(I)fg-*]}; do
    fg[${k#fg-}]="$lc${color[$k]}$rc"
    fg_bold[${k#fg-}]="$lc${color[bold]};${color[$k]}$rc"
  done

  typeset -AHg bg bg_bold
  for k in ${(k)color[(I)bg-*]}; do
    bg[${k#bg-}]="$lc${color[$k]}$rc"
    bg_bold[${k#bg-}]="$lc${color[bold]};${color[$k]}$rc"
  done
}

# Use menu for autocompletion when number of items >= 2
zstyle ':completion:*' menu select=2
# Colors for files
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}
# Verbose completion results
zstyle ':completion:*' verbose true
# Keep directories and files separated
zstyle ':completion:*' list-dirs-first true
# Case insensitive completion
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}' 'l:|=* r:|=*'

DIRSTACKSIZE=8
# If a command is issued that can’t be executed as a normal command, and the
# command is the name of a directory, perform the cd command to that directory
setopt auto_cd
# Make cd push the old directory onto the directory stack
setopt auto_pushd
# Don’t push multiple copies of the same directory onto the directory stack
setopt pushd_ignore_dups
# Exchanges the meanings of ‘+’ and ‘-’ when used with a number to specify a
# directory in the stack
setopt pushd_minus
# Don't print the new working directory after pushd-ing
setopt pushd_silent
# Don't print the new working directory after cd-ing
setopt cd_silent

take() { mkdir -p "$@" && cd "${@:$#}" }

# Allow comments in the interactive shell
setopt interactive_comments

# The time the shell waits, in hundredths of seconds, for another key to be
# pressed when reading bound multi-character sequences. Useful for vim mode
KEYTIMEOUT=10

# NOTE: If you want to see what a certain keypress makes do CTRL-V <KEYPRESS>

# Default: WORDCHARS="*?_-.[]~=/&;!#$%^(){}<>"
# Remove the / character from the $WORDCHARS
WORDCHARS="${WORDCHARS/\//}"

# Use emacs keybindings
bindkey -e

autoload -U up-line-or-beginning-search down-line-or-beginning-search
zle -N up-line-or-beginning-search
zle -N down-line-or-beginning-search
bindkey '^P' up-line-or-beginning-search
bindkey '^N' down-line-or-beginning-search
bindkey "^[[A" up-line-or-beginning-search
bindkey "^[[B" down-line-or-beginning-search

# Perform history expansion and insert a space into the buffer. If you type a
# space after a command that starts with ! (or ^) to refer to (part of) a
# previous command, that history reference is expanded
bindkey ' ' magic-space
bindkey '^A' beginning-of-line
bindkey '^K' kill-line
bindkey '^W' backward-kill-word
bindkey '^H' backward-delete-char
bindkey '^U' backward-kill-line
bindkey '^R' history-incremental-search-backward
bindkey '^[[1;3C' forward-word # alt-right
bindkey '^[f' forward-word # alt-f
bindkey '^[[1;3D' backward-word # alt-left
bindkey '^[b' backward-word # alt-b
bindkey '^[d' kill-word # alt-d
bindkey "^[[Z" reverse-menu-complete # shift-tab

if command -v fzf &>/dev/null && command -v fd &>/dev/null; then
  fzf-file-widget() {
    # Need extended_glob for trimming $current_word
    setopt localoptions extended_glob
    local -A matched_words
    local current_word lbuffer rbuffer
    autoload -U match-words-by-style && match-words-by-style

    if [[ -n "${matched_words[ws-before-cursor]}" && -n "${matched_words[ws-after-cursor]}" ]] || \
      [[ -n "${matched_words[ws-before-cursor]}" && "${#RBUFFER}" = 0 ]] || \
      [[ -n "${matched_words[ws-after-cursor]}" && "${#LBUFFER}" = 0 ]]; then
      # Whitespace on both sides or at beginning or end
      lbuffer="$LBUFFER"
      rbuffer="$RBUFFER"
    elif [[ -n "${matched_words[ws-before-cursor]}" || ( "$CURSOR" = 0 && -z "${matched_words[ws-after-cursor]}" ) ]]; then
      # Beginning of a word
      current_word="${matched_words[word-after-cursor]}"
      lbuffer="$LBUFFER"
      rbuffer="${BUFFER[$(( CURSOR + ${#matched_words[word-after-cursor]} + 1 )),-1]}"
    elif [[ -n "${matched_words[ws-after-cursor]}" || "$CURSOR" = "${#BUFFER}" ]]; then
      # At end of word
      current_word="${matched_words[word-before-cursor]}"
      lbuffer="${BUFFER[1,$(( CURSOR - ${#matched_words[word-before-cursor]} ))]}"
      rbuffer="$RBUFFER"
    else
      # Inside word
      current_word="${matched_words[word-before-cursor]}${matched_words[word-after-cursor]}"
      lbuffer="${matched_words[start]}${matched_words[ws-before-word]}"
      rbuffer="${matched_words[ws-after-word]}${matched_words[end]}"
    fi
    # Trim leading and trailing whitespace
    current_word="${${current_word##[[:space:]]##}%%[[:space:]]##}"

    local path="$(fd --hidden --exclude .git | fzf --query "$current_word")"
    if [[ "$status" != 0 || -z "$path" ]]; then
      zle reset-prompt
      return
    fi

    LBUFFER="${lbuffer}${path}"
    RBUFFER="$rbuffer"
    zle reset-prompt
  }
  zle -N fzf-file-widget
  bindkey '^T' fzf-file-widget

  fzf-select-history() {
    local command="$(fc -l -n 1 | fzf --tiebreak index --tac --query "$LBUFFER")"
    if [[ "$status" != 0 || -z "$command" ]]; then
      return
    fi
    BUFFER="$command"
    CURSOR=$#BUFFER
    zle reset-prompt
  }
  zle -N fzf-select-history
  bindkey '^R' fzf-select-history

  export FZF_DEFAULT_COMMAND='fd --type f --hidden --exclude .git'
fi

# make some commands not show up in history
HISTFILE="${ZDOTDIR:-${HOME}}/.zsh_history"
HISTIGNORE="ls:ll:la:cd:cd -:pwd:exit:date:* --help"
HISTSIZE=10000000
SAVEHIST=10000000

# History command configuration
# Treat the '!' character specially during expansion.
setopt bang_hist
# Write the history file in the ":start:elapsed;command" format.
setopt extended_history
# Share history between all sessions.
setopt share_history
# Delete old recorded entry if new entry is a duplicate.
setopt hist_ignore_all_dups
# Don't record an entry starting with a space.
setopt hist_ignore_space
# Remove superfluous blanks before recording entry.
setopt hist_reduce_blanks
# Don't execute immediately upon history expansion.
setopt hist_verify
