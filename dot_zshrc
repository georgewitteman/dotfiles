#!/usr/bin/env zsh
# Load Order         Interactive  Interactive  Script
# Startup            Only login   Always
# ------------------ -----------  -----------  ------
# /etc/zshenv             1            1         1
# $ZDOTDIR/.zshenv        2            2         2
# /etc/zprofile           3
# $ZDOTDIR/.zprofile      4
# /etc/zshrc              5            3
# $ZDOTDIR/.zshrc         6            4
# /etc/zlogin             7
# $ZDOTDIR/.zlogin        8
#
# Shutdown
# ------------------ -----------  -----------  ------
#   ~/.zlogout            9
# /etc/zlogout           10
#
# Note: ZSH seems to read ~/.profile as well, if ~/.zshrc is not present.
# `.zprofile' is meant as an alternative to `.zlogin' for ksh fans; the two are
# not intended to be used together

# http://zsh.sourceforge.net/Intro/intro_3.html
# `.zshrc' is sourced in interactive shells. It should contain commands to set
# up aliases, functions, options, key bindings, etc.

# ----- NOTES FROM DOCUMENTATION ----------------------------
#
# WHY USE [[ ]] INSTEAD OF [ ]: Second aside for users of sh: you may remember
# that tests in sh used a single pair of brackets, `if [ ... ]; then ...', or
# equivalently as a command called test, `if test ...; then ...'. The Korn
# shell was deliberately made to be different, and zsh follows that. The reason
# is that `[[' is treated specially, which allows the shell to do some extra
# checks and allows more natural syntax. For example, you may know that in sh
# it's dangerous to test a parameter which may be empty: `[ $var = foo ]' will
# fail if $var is empty, because in that case the word is missed out and the
# shell never knows it was supposed to be there; with `[[ ... ]]', this is
# quite safe because the shell is aware there's a word before the `=', even if
# it's empty. Also, you can use `&&' and `||' to mean logical `and' and `or',
# which agrees with the usual UNIX/C convention; in sh, they would have been
# taken as starting a new command, not as part of the test, and you have to use
# the less clear `-a' and `-o'. Actually, zsh provides the old form of test for
# backward compatibility, but things will work a lot more smoothly if you don't
# use it.
#
# STARTUP FILE ORDER AND PURPOSE: Certain options from earlier startup files
# can prevent later startup files from running
#  - /etc/zshenv: Always run for every zsh
#  - ~/.zshenv: Usually run for every zsh
#  - /etc/profile: Run for login shells
#  - ~/.zprofile: Run for login shells
#  - /etc/zshrc: Run for interactive shells
#  - ~/.zshrc: Run for interactive shells
#  - /etc/zlogin: Run for login shells
#  - ~/.zlogin: Run for login shells

export EDITOR="vim"

# No duplicates in $path and $fpath
typeset -U path fpath

# Homebrew paths
path=("/usr/local/bin" "/usr/local/sbin" $path)

# Snowflake paths

# Leaving this here so other install scripts think that it's here, since I'm
# setting the path manually
# ====================
# if command -v pyenv 1>/dev/null 2>&1; then
#   eval "$(pyenv init - --no-rehash zsh)"
# fi
# ====================

# Leave this here so that the snowsql installer thinks that it's already here
# and doesn't add the path. The bootstrap script that installs snowsql links
# the binary to /usr/local/bin/snowsql.
# ====================
# added by Snowflake SnowSQL installer v1.2
# ====================

[[ ! -d "$HOME/.local/bin" ]] && mkdir -p "$HOME/.local/bin"
path=("$HOME/.local/bin" $path)

# if (( ! $+commands[fzf] )) && [[ -d "/usr/local/opt/fzf/bin" ]]; then
if ! whence fzf >/dev/null && [[ -d "/usr/local/opt/fzf/bin" ]]; then
  path=("/usr/local/opt/fzf/bin" $path)
fi

# Add arcanist to path if it's installed
[[ -d "$HOME/.phabricator/arcanist/bin" ]] && path=("$HOME/.phabricator/arcanist/bin" $path)

# Set up fpath for my autoloaded functions
fpath+=("${XDG_CONFIG_HOME:-$HOME/.config}/zsh/autoload/")
autoload -Uz ${XDG_CONFIG_HOME:-$HOME/.config}/zsh/autoload/*

if [[ -d "/usr/share/zsh/site-functions" ]] && [ "/usr/share/zsh/site-functions"(NF) ]; then
  fpath+=("/usr/share/zsh/site-functions")
fi

zplug add git@github.com:romkatv/zsh-prompt-benchmark.git || true
zplug add git@github.com:georgewitteman/zsh-prompt.git || true
zplug add git@github.com:georgewitteman/zsh-ctrl-z.git || true
zplug add git@github.com:georgewitteman/zsh-yavm.git || true
zplug init

yavm init pyenv nodejs
preexec_functions+=(yavm_set_path)

if [[ -n "$VIRTUAL_ENV" ]]; then
  # Allows you to `rc` (reload config, see aliases below) from inside a virtual
  # environment without losing the virtual environment. Normally `exec` keeps
  # all environment variables, but certain ones get overwritten during zsh
  # initialization. This reinitializes them. Keep this after anything else that
  # sets the path.
  source "$VIRTUAL_ENV/bin/activate"
fi

export CLICOLOR=1
export LSCOLORS="exfxcxdxbxegedabagacad"
export LS_COLORS="di=34:ln=35:so=32:pi=33:ex=31:bd=34;46:cd=34;43:su=30;41:sg=30;46:tw=30;42:ow=30;43"

# Fixes gpg when "GPG Suite" is not installed (i.e. gpg is installed from homebrew)
export GPG_TTY="$TTY"

# This affects every invocation of `less`.
#
#   -i   case-insensitive search unless search string contains uppercase letters
#   -R   color
#   -F   exit if there is less than one page of content
#   -X   keep content on screen after exit
#   -M   show more info at the bottom prompt line
#   -x4  tabs are 4 instead of 8
export LESS=-iRFXMx4

export PAGER=less

# [r]eload [c]onfig
alias rc='echo-eval "path=(); fpath=(); exec $SHELL --login --interactive"'

# Suffix aliases: Open the file in preferred program just by typing
#                 `$ <file_name><CR>`
alias -s {py,md}=vim
# Paste in a git repository url and it will automatically clone it
alias -s git='clone'

alias make-venv='python3 -m venv .venv'
alias make-venv2='virtualenv .venv'
alias activate='activate-venv .venv'

# Tmux sessions
alias default="new-or-switch-tmux default $HOME"
alias misc='default'

if [[ -z "$TMUX" && "$TERM" = "alacritty" ]]; then
  # Always open tmux when starting Alacritty
  default
fi

# NOTE: Although the $commands variable is faster to access, it costs a few ms
# (~3ms) when we first reference it. Calling whence actually saves time, even
# though it's significantly slower when you run it hundreds of times.
# if (( ! $+commands[sudoedit] )); then
if ! whence sudoedit >/dev/null; then
  alias sudoedit='sudo -e'
fi

# Always use local package jest
# if (( $+commands[yarn] )); then
if whence yarn >/dev/null; then
  alias jest='yarn run jest'
fi

# -F adds characters to indicate what kind of file it is (e.g. "/" for directories)
alias ls='ls -F'
alias ll='ls -l'
alias la='ls -la'

# if (( $+commands[kubectl] )); then
if whence kubectl >/dev/null; then
  alias k='kubectl'
fi

# if (( $+commands[terraform] )); then
if whence terraform >/dev/null; then
  alias t='terraform'
fi

# if (( $+commands[git] )); then
if whence git >/dev/null; then
  alias g='git-helper'
  alias gs='echo-run status'
  alias gb='git-branch'
  alias develop='master'
  alias switch='echo-run git switch'
  alias restore='echo-run git restore'
fi

alias c='clear'

# if (( $+commands[brew] )); then
if whence brew >/dev/null; then
  compdef brew-helper='brew'
  alias brew='brew-helper'
fi

# Color variables
autoload -U colors && colors

# Use menu for autocompletion when number of items >= 2
zstyle ':completion:*' menu select=2
# Colors for files
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}
# Verbose completion results
zstyle ':completion:*' verbose true
# Keep directories and files separated
zstyle ':completion:*' list-dirs-first true
# Case insensitive completion
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}' 'l:|=* r:|=*'

DIRSTACKSIZE=8
# If a command is issued that can’t be executed as a normal command, and the
# command is the name of a directory, perform the cd command to that directory
setopt auto_cd
# Make cd push the old directory onto the directory stack
setopt auto_pushd
# Don’t push multiple copies of the same directory onto the directory stack
setopt pushd_ignore_dups
# Exchanges the meanings of ‘+’ and ‘-’ when used with a number to specify a
# directory in the stack
setopt pushd_minus
# Don't print the new working directory after pushd-ing
setopt pushd_silent
# Don't print the new working directory after cd-ing
setopt cd_silent

# The time the shell waits, in hundredths of seconds, for another key to be
# pressed when reading bound multi-character sequences. Useful for vim mode
KEYTIMEOUT=10

# NOTE: If you want to see what a certain keypress makes do CTRL-V <KEYPRESS>

zmodload zsh/terminfo

# Default: WORDCHARS="*?_-.[]~=/&;!#$%^(){}<>"
# Remove the / character from the $WORDCHARS
WORDCHARS="${WORDCHARS/\//}"

# Use emacs keybindings
bindkey -e

autoload -U up-line-or-beginning-search down-line-or-beginning-search
zle -N up-line-or-beginning-search
zle -N down-line-or-beginning-search
bindkey '^P' up-line-or-beginning-search
bindkey '^N' down-line-or-beginning-search
[[ "${terminfo[kcuu1]}" != "" ]] && \
  bindkey "${terminfo[kcuu1]}" up-line-or-beginning-search
[[ "${terminfo[kcud1]}" != "" ]] && \
  bindkey "${terminfo[kcud1]}" down-line-or-beginning-search

# Perform history expansion and insert a space into the buffer. If you type a
# space after a command that starts with ! (or ^) to refer to (part of) a
# previous command, that history reference is expanded
bindkey ' ' magic-space
bindkey '^A' beginning-of-line
bindkey '^K' kill-line
bindkey '^W' backward-kill-word
bindkey '^H' backward-delete-char
bindkey '^U' backward-kill-line
bindkey '^R' history-incremental-search-backward
bindkey '^[[1;3C' forward-word # alt-right
bindkey '^[f' forward-word # alt-f
bindkey '^[[1;3D' backward-word # alt-left
bindkey '^[b' backward-word # alt-b
bindkey '^[d' kill-word # alt-d
bindkey "^[[Z" reverse-menu-complete # shift-tab

if [[ -f "/usr/local/opt/fzf/shell/key-bindings.zsh" ]]; then
  source "/usr/local/opt/fzf/shell/key-bindings.zsh"
elif [[ -f "/usr/share/fzf/key-bindings.zsh" ]]; then
  source "/usr/share/fzf/key-bindings.zsh"
fi

# make some commands not show up in history
HISTIGNORE="ls:ll:la:cd:cd -:pwd:exit:date:* --help"
HISTSIZE=10000000
SAVEHIST=10000000

# History command configuration
# Treat the '!' character specially during expansion.
setopt bang_hist
# Write the history file in the ":start:elapsed;command" format.
setopt extended_history
# Share history between all sessions.
setopt share_history
# Delete old recorded entry if new entry is a duplicate.
setopt hist_ignore_all_dups
# Don't record an entry starting with a space.
setopt hist_ignore_space
# Remove superfluous blanks before recording entry.
setopt hist_reduce_blanks
# Don't execute immediately upon history expansion.
setopt hist_verify

# FZF
export FZF_DEFAULT_COMMAND='fd --type f --hidden --exclude .git'
