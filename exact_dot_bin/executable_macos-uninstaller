#!/usr/bin/env bash

set -o errexit

USAGE="usage: $(basename "$0") /Applications/Path.app [--mdfind]"

mdfind=false

for arg; do
  shift
  set -- "$@" "$arg"

  case "$arg" in
    -h | --help)
      echo "$USAGE"
      exit 0
      ;;
    --mdfind)
      mdfind=true
      ;;
  esac
done

if [ $# -eq 0 ]; then
  echo "$USAGE" >&2
  exit 1
fi

if $mdfind; then
  typeset -a related_files
  IFS=$'\n' read -r -d '' -a related_files < <(mdfind -name "$1") || true

  if [ "${#related_files[@]}" -eq 0 ]; then
    echo "No '$1' application files on your computer"
    exit 0
  fi

  echo "Related files:"
  for filename in "${related_files[@]}"; do
    echo "  ${filename}"
  done

  for filename in "${related_files[@]}"; do
    if confirm "Do you wish to delete ${filename}?"; then
      echo rm -rvf "$filename"
    fi
  done

  exit $?
fi

if [ ! -e "$1/Contents/Info.plist" ]; then
  printf "Cannot find app plist (%s does not exist).\n" "${1}/Contents/Info.plist"
  exit 1
fi

bundle_identifier="$(/usr/libexec/PlistBuddy -c "Print CFBundleIdentifier" "$1/Contents/Info.plist" 2> /dev/null)"

if [ "$bundle_identifier" = "" ]; then
  printf "%s\n" "Cannot find app bundle identifier"
  exit 1
fi

printf "%s\n" "Checking for running processes…"
sleep 1

app_name="$(basename $1 .app)"

typeset -a processes
IFS=$'\n' read -r -d '' -a processes < <(pgrep -afil "$app_name" | grep -v "macos-uninstaller") || true

if [ ${#processes[@]} -gt 0 ]; then
  printf "%s\n" "${processes[@]}"
  if confirm "Kill running processes?"; then
    printf "%s\n" "Killing running processes…"
    sleep 1
    for process in "${processes[@]}"; do
      echo $process | awk '{print $1}' | xargs sudo kill 2>&1 | grep -v "No such process"
    done
  fi
fi

paths=()
typeset -a paths

IFS=$'\n' read -r -d '' -a app_name_paths < <(find /private/var/db/receipts -iname "*$app_name*.bom" -maxdepth 1 -prune) || true
IFS=$'\n' read -r -d '' -a bundle_id_paths < <(find /private/var/db/receipts -iname "*$bundle_identifier*.bom" -maxdepth 1 -prune) || true
paths+=("${app_name_paths[@]}" "${bundle_id_paths[@]}")

if [ ${#paths[@]} -gt 0 ]; then
  printf "%s\n" "Saving bill of material logs to desktop…"
  sleep 1
  for path in "${paths[@]}"; do
    mkdir -p "$HOME/Desktop/$app_name"
    lsbom -f -l -s -p f $path > "$HOME/Desktop/$app_name/$(basename $path).log"
  done
fi

printf "%s\n" "Finding app data…"
sleep 1

locations=(
  "$HOME/Library"
  "$HOME/Library/Application Scripts"
  "$HOME/Library/Application Support"
  "$HOME/Library/Application Support/CrashReporter"
  "$HOME/Library/Containers"
  "$HOME/Library/Caches"
  "$HOME/Library/HTTPStorages"
  "$HOME/Library/Group Containers"
  "$HOME/Library/Internet Plug-Ins"
  "$HOME/Library/LaunchAgents"
  "$HOME/Library/Logs"
  "$HOME/Library/Preferences"
  "$HOME/Library/Preferences/ByHost"
  "$HOME/Library/Saved Application State"
  "$HOME/Library/WebKit"
  "/Library"
  "/Library/Application Support"
  "/Library/Application Support/CrashReporter"
  "/Library/Caches"
  "/Library/Extensions"
  "/Library/Internet Plug-Ins"
  "/Library/LaunchAgents"
  "/Library/LaunchDaemons"
  "/Library/Logs"
  "/Library/Preferences"
  "/Library/PrivilegedHelperTools"
  "/private/var/db/receipts"
  "/usr/local/bin"
  "/usr/local/etc"
  "/usr/local/opt"
  "/usr/local/sbin"
  "/usr/local/share"
  "/usr/local/var"
  "$(getconf DARWIN_USER_CACHE_DIR | sed "s/\/$//")"
  "$(getconf DARWIN_USER_TEMP_DIR | sed "s/\/$//")"
)


paths=($1)

for location in "${locations[@]}"; do
  IFS=$'\n' read -r -d '' -a app_name_locs < <(find "$location" -iname "*$app_name*" -maxdepth 1 -prune) || true
  paths+=("${app_name_locs[@]}")
done

for location in "${locations[@]}"; do
  IFS=$'\n' read -r -d '' -a bundle_id_locs < <(find "$location" -iname "*$bundle_identifier*" -maxdepth 1 -prune) || true
  paths+=("${bundle_id_locs[@]}")
done


# Sort and get unique paths
IFS=$'\n' read -r -d '' -a paths < <(printf "%s\n" "${paths[@]}" | sort -u) || true

if [ "${#paths[@]}" -eq 0 ]; then
  echo "No paths found." >&2
  exit 1
fi


echo "Paths to delete:" >&2

for path in "${paths[@]}"; do
  if [ -d "$path" ]; then
    ls -ladh "$path"
  else
    ls -lah "$path"
  fi
done

if confirm "Move app data to trash?"; then
  printf "%s\n" "Moving app data to trash…"
  sleep 1
  posixFiles="$(printf ", POSIX file \"%s\"" "${paths[@]}" | awk '{print substr($0,3)}')"
  osascript -e "tell application \"Finder\" to delete { $posixFiles }" > /dev/null
  printf "%s\n" "Done"
fi
