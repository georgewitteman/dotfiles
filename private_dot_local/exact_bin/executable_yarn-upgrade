#!/usr/bin/env zsh

set -e # Fail on first error

semver_regex() {
  local VERSION="([0-9]+)[.]([0-9]+)[.]([0-9]+)"
  local INFO="([0-9A-Za-z-]+([.][0-9A-Za-z-]+)*)"
  local PRERELEASE="(-${INFO})"
  local METAINFO="([+]${INFO})"
  echo "${VERSION}${PRERELEASE}?${METAINFO}?$"
}

SEMVER_REGEX=`semver_regex`
unset -f semver_regex

packages=()
current_versions=()
new_versions=()

printf "yarn install... "
yarn install > /dev/null 2>&1
echo "Done!"

while [ "$1" != "" ]; do
  package=$1
  shift
  packages+=($package)
  echo "Package: $package"

  package_json_path=$(npm prefix)/package.json

  if [[ ! -f "$package_json_path" ]]; then
    echo "Could not find package.json (looked $package_json_path)"
    return 1
  fi

  current_installed_version=$(jq --raw-output '.version' $(npm root)/$package/package.json)
  echo "Current installed version: $current_installed_version"
  current_versions+=($current_installed_version)

  current_package_json_version=$(
    jq --raw-output --arg pkg "$package" \
      '.dependencies[$pkg] // .devDependencies[$pkg] // .peerDependencies[$pkg] // .resolutions[$pkg] // .optionalDependencies[$pkg]' \
      $package_json_path
  )
  echo "Current version in package.json: $current_package_json_version"

  printf "Latest version: "
  version_prefix=$(echo $current_package_json_version | sed -E "s/$SEMVER_REGEX//")
  latest_raw_version=$(yarn info --json $package version | jq --raw-output ".data")
  new_versions+=($latest_raw_version)
  echo "$latest_raw_version"

  latest_version=$version_prefix$latest_raw_version

  # Using tac | tac forces the file to be read fully before passing it on to
  # jq. This prevents jq from trying to read from and write to the same file,
  # which causes the output file to be empty.
  tmpfile=$(mktemp)
  jq \
    --arg pkg "$package" \
    --arg version "$latest_version" \
    '
    if .resolutions[$pkg] then .resolutions[$pkg] = $version else . end |
    if .dependencies[$pkg] then .dependencies[$pkg] = $version else . end |
    if .devDependencies[$pkg] then .devDependencies[$pkg] = $version else . end |
    if .peerDependencies[$pkg] then .peerDependencies[$pkg] = $version else . end |
    if .optionalDependencies[$pkg] then .optionalDependencies[$pkg] = $version else . end
    ' \
    $package_json_path > $tmpfile
  mv -f $tmpfile $package_json_path

  echo "Updated $package in package.json to $latest_version"
  echo
done

printf "yarn install... "
yarn install > /dev/null 2>&1
echo "Done!"
