#!/usr/bin/env bash

set -x

VIM_DIR="${VIM_DIR:-$HOME/.vim}"
MANIFEST="$VIM_DIR/plugins"
PLUGINS_DIR="${VIM_PLUGINS_DIR:-$VIM_DIR/pack/mine/start}"
COMMENT="^ *#"

mkdir -p "$PLUGINS_DIR"

_edit-manifest() {
  "${EDITOR:-vim}" "$MANIFEST"
}

_get-repo-url() {
  local repo="$1"
  [[ "$repo" = git@github.com:* ]] && echo "$repo" && return
  [[ "$repo" = http://* || "$repo" = https://* ]] && echo "$repo.git" && return
  local slashes="${repo//[^\/]}"
  local count="${#slashes}"
  [ "$count" -eq 1 ] && echo "https://github.com/${repo}.git" && return
  # Otherwise, it's a local repo
}

_install-plugin() {
  local line="$1"
  local plugin_name="${line##*/}"

  if [[ -d "$PLUGINS_DIR/$plugin_name" ]]; then
    echo "$plugin_name: already installed"
    return 1
  fi

  local repo
  repo=$(_get-repo-url "$line")
  if [[ -n "$repo" ]]; then
    if ! git clone --depth 1 "$repo" "$PLUGINS_DIR/$plugin_name" >/dev/null 2>&1; then
      echo "Failed to clone ${plugin_name}: git clone --depth 1 ${repo} ${PLUGINS_DIR}/${plugin_name}" >&2
      return 1
    fi
  else
    if ! ln -nfs "$line" "$PLUGINS_DIR/$plugin_name"; then
      echo "Failed to link ${plugin_name}: ln -nfs ${line} ${PLUGINS_DIR}/${plugin_name}" >&2
      return 1
    fi
  fi
  echo "$plugin_name: installed"
}

_install-missing-plugins() {
  (
  # Running this in a subshell because for some reason that's the only way to
  # reliably not have the job notifications show up. I think it might be
  # because the MONITOR option turns on job control, and something about the
  # wait command requires job control to be on to work properly
  while IFS="" read -r line || [ -n "$line" ]; do
    if [[ -z "${line// }" ]] || [[ "$line" =~ $COMMENT ]]; then
      continue
    fi
    # shellcheck disable=SC2031
    _install-plugin "$line" &
  done < "$MANIFEST"
  wait
  )
  _update-help-tags
}

_uninstall-plugin() {
  local dir="$1"
  [[ -z "$dir" ]] && return 1
  local plugin_name=${dir##*/}
  (grep -v "$COMMENT" "$MANIFEST" | grep -q "$plugin_name") && return 1
  rm -rf "$dir"
  echo "$plugin_name: uninstalled"
}

_uninstall-unwanted-plugins() {
  local did_uninstall=0
  # The '(N)' tells zsh to not error when it doesn't find any directories and
  # the '(/)' tells it to only look for directories
  for dir in "$PLUGINS_DIR"/*; do
    if [[ ! -d "$dir" ]]; then
      continue
    fi
    if _uninstall-plugin "$dir"; then
      did_uninstall=1
    fi
  done
  [[ "$did_uninstall" -ne 1 ]] && echo "No plugins to uninstall" && return
  _update-help-tags
}

_update-plugin() {
  local dir="$1"
  local quieter="$2"
  local plugin_name=${dir##*/}
  if [[ -L "$dir" ]] || [[ ! -d "$dir/.git" ]]; then
    echo "$plugin_name: not updating, local plugin"
    return 1
  fi

  if ! cd "$dir"; then
    echo "$plugin_name: Failed to cd to ${dir}"
    return 1
  fi
  local branch
  branch="$(git rev-parse --abbrev-ref --symbolic-full-name HEAD)"

  if [[ "$branch" == "HEAD" ]]; then
    echo "$plugin_name: not updating, detached HEAD"
    return 1
  fi

  local start_commit
  start_commit="$(git rev-parse HEAD)"
  git pull --quiet

  local commits
  commits=$(git rev-list --count "${start_commit}...HEAD")
  if [[ "$commits" -eq 0 ]]; then
    [[ -z "$quieter" ]] && echo "$plugin_name: nothing to update"
    return 1
  fi

  local log
  log="\n$(git log --oneline "${start_commit}...HEAD")\n"
  if [[ -n "$quieter" ]]; then
    echo "$plugin_name: updated $commits commit(s)"
  else
    echo "$plugin_name: updated $commits commit(s)$log"
  fi
}

_update-plugins() {
  local quieter="$1"
  [[ -n "$quieter" ]] && shift
  (
  # Running this in a subshell because for some reason that's the only way to
  # reliably not have the job notifications show up. I think it might be
  # because the MONITOR option turns on job control, and something about the
  # wait command requires job control to be on to work properly
  #
  # The '(N)' tells zsh to not error when it doesn't find any directories and
  # the '(/)' tells it to only look for directories
  for dir in "$PLUGINS_DIR"/*; do
    if [[ ! -d "$dir" ]]; then
      continue
    fi
    plugin_name=${dir##*/}
    [[ -n "$1" ]] && [[ "$1" != "$plugin_name" ]] && continue
    _update-plugin "$dir" "$quieter" &
  done
  while IFS="" read -r line || [ -n "$line" ]; do
    if [[ -z "${line// }" ]] || [[ "$line" =~ $COMMENT ]]; then
      continue
    fi
    # shellcheck disable=SC2031
    local plugin_name=${line##*/}
    [[ -d "$PLUGINS_DIR/$plugin_name" ]] && continue
    # shellcheck disable=SC2031
    _install-plugin "$line" &
  done < "$MANIFEST"
  wait
  )
  _update-help-tags
}

_update-help-tags() {
  vim -c 'helptags ALL' -c quit
}

_usage() {
  echo "Vim plugin manager"
  echo ""
  echo "Usage: $command_name edit"
  echo "       $command_name install"
  echo "       $command_name clean"
  echo "       $command_name update [--quieter]"
  echo "       $command_name help | -h | --help"
  echo ""
  echo "Options:"
  echo "  -h, --help   Show this screen."
  echo " --quieter     Don't show as much output."
  echo ""
}

command_name="$(basename "$0")"
action="$1"

case $action in
  edit)
    _edit-manifest
    _install-missing-plugins
    ;;

  install)
    _install-missing-plugins
    ;;

  clean)
    _uninstall-unwanted-plugins
    ;;

  update)
    shift
    _update-plugins "$@"
    ;;

  help | --help | -h)
    _usage
    ;;

  *)
    _usage
    exit 1
    ;;
esac
