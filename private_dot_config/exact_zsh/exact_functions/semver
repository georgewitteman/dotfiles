#!/usr/bin/env zsh

local USAGE="Increment semantic versions.

Usage:
  ${0:t} -h | --help
  ${0:t} [--major|--minor|--patch] <version string>
  ${0:t} [options] <version string>

Options:
  --no-padding   Don't pad numbers with 0 to keep their string length.
  --keep-suffix  Keep the existing suffix.
  --major        Major version bump.
  --minor        Minor version bump.
  --patch        Patch version bump.
"

local args arg bump_type="default" new_suffix="" no_padding
zparseopts -A args -E -D -F -- h -help -major -minor -patch \
  -keep-padding -suffix: -keep-suffix -no-padding || return "$status"

for arg in ${(k)args}; do
  case "$arg" in
    -h | --help) echo "$USAGE"; return ;;
    --major) bump_type="major" ;;
    --minor) bump_type="minor" ;;
    --patch) bump_type="patch" ;;
    --no-padding) no_padding=1 ;;
    --suffix) new_suffix="${args[$arg]}" ;;
    --keep-suffix) unset new_suffix ;;
  esac
done

local version_str="$1"

if [[ -z "$version_str" ]]; then
  echo-err "A version string is required."
  return 1
fi

shift

local prefix major minor patch suffix

if [[ "$version_str" =~ '^(.*[A-Za-z])?([0-9]+)\.([0-9]+)\.([0-9]+)([-\+].*)?$' ]]; then
  prefix="${match[1]}"
  major="${match[2]}"
  minor="${match[3]}"
  patch="${match[4]}"
  suffix="${match[5]}"
  if [[ "$bump_type" = "default" ]]; then
    bump_type="minor"
  fi
elif [[ "$version_str" =~ '^(.*[A-Za-z])?([0-9]+)\.([0-9]+)([-\+].*)?$' ]]; then
  prefix="${match[1]}"
  major="${match[2]}"
  minor="${match[3]}"
  suffix="${match[4]}"
  if [[ "$bump_type" = "default" ]]; then
    bump_type="minor"
  fi
elif [[ "$version_str" =~ '^(.*[A-Za-z])?([0-9]+)([-\+].*)?$' ]]; then
  prefix="${match[1]}"
  major="${match[2]}"
  suffix="${match[3]}"
  if [[ "$bump_type" = "default" ]]; then
    bump_type="major"
  fi
else
  echo-err "The given version string format is not supported."
  return 1
fi

# echo "bump type: $bump_type"
# echo "input: $version_string"
# echo "prefix: $prefix"
# echo "major: $major"
# echo "minor: $minor"
# echo "patch: $patch"
# echo "suffix: $suffix"

# Increment
local new_major="${major}" new_minor="${minor}" new_patch="${patch}"
if [[ -n "$major" && "$bump_type" = "major" ]]; then
  new_major="$(( major + 1 ))"
  [[ -n "$new_minor" && "$new_minor" -ne 0 ]] && new_minor=0
  [[ -n "$new_patch" && "$new_patch" -ne 0 ]] && new_patch=0
elif [[ -n "$minor" && "$bump_type" = "minor" ]]; then
  new_minor="$(( minor + 1 ))"
  [[ -n "$new_patch" && "$new_patch" -ne 0 ]] && new_patch=0
elif [[ -n "$patch" && "$bump_type" = "patch" ]]; then
  new_patch="$(( patch + 1 ))"
else
  echo-err "Invalid bump type: $bump_type"
  return 1
fi

# Check padding. A version part should never be shorter after incrementing.
if [[ -z "$no_padding" ]]; then
  if [[ "$new_major" != "$major" && "${(l:${#major}::0:)new_major}" -eq "$new_major" ]]; then
    new_major="${(l:${#major}::0:)new_major}"
  fi
  if [[ "$new_minor" != "$minor" && "${(l:${#minor}::0:)new_minor}" -eq "$new_minor" ]]; then
    new_minor="${(l:${#minor}::0:)new_minor}"
  fi
  if [[ "$new_patch" != "$patch" && "${(l:${#patch}::0:)new_patch}" -eq "$new_patch" ]]; then
    new_patch="${(l:${#patch}::0:)new_patch}"
  fi
fi

echo "${prefix}${new_major}${new_minor:+.}${new_minor}${new_patch:+.}${new_patch}${new_suffix-${suffix}}"
