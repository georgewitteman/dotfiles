window:
  # Window padding (changes require restart)
  #
  # Blank space added around the window in pixels. This padding is scaled
  # by DPI and the specified value is always added at both opposing sides.
  padding:
    x: 1
    y: 1

  # Spread additional padding evenly around the terminal content.
  dynamic_padding: true

  # Startup Mode (changes require restart)
  #
  # Values for `startup_mode`:
  #   - Windowed
  #   - Maximized
  #   - Fullscreen
  #
  # Values for `startup_mode` (macOS only):
  #   - SimpleFullscreen
  startup_mode: Maximized

# Font configuration (changes require restart)
font:
  ## Normal (roman) font face
  #normal:
  #  # Font family
  #  #
  #  # Default:
  #  #   - (macOS) Menlo
  #  #   - (Linux) monospace
  #  #   - (Windows) Consolas
  #  family: SF Mono

  #  # The `style` can be specified to pick a specific face.
  #  style: Light

  ## Bold font face
  #bold:
  #  # Font family
  #  #
  #  # If the bold family is not specified, it will fall back to the
  #  # value specified for the normal font.
  #  family: SF Mono

  #  # The `style` can be specified to pick a specific face.
  #  style: Bold

  ## Italic font face
  #italic:
  #  # Font family
  #  #
  #  # If the italic family is not specified, it will fall back to the
  #  # value specified for the normal font.
  #  family: SF Mono

  #  # The `style` can be specified to pick a specific face.
  #  style: Regular Italic

  # Point size
  size: 12.0

  # Offset is the extra space around each character. `offset.y` can be thought of
  # as modifying the line spacing, and `offset.x` as modifying the letter spacing.
  offset:
    x: 0
    y: 0

  # Glyph offset determines the locations of the glyphs within their cells with
  # the default being at the bottom. Increasing `x` moves the glyph to the right,
  # increasing `y` moves the glyph upwards.
  glyph_offset:
    x: 0
    y: 0

  # Thin stroke font rendering (macOS only)
  #
  # Thin strokes are suitable for retina displays, but for non-retina screens
  # it is recommended to set `use_thin_strokes` to `false`
  #
  # macOS >= 10.14.x:
  #
  # If the font quality on non-retina display looks bad then set
  # `use_thin_strokes` to `true` and enable font smoothing by running the
  # following command:
  #   `defaults write -g CGFontRenderingFontSmoothingDisabled -bool NO`
  #
  # This is a global setting and will require a log out or restart to take
  # effect.
  use_thin_strokes: true

# My Customized Nord
colors:
  primary:
    background: '#2E3440'
    foreground: '#D8DEE9'

  selection:
    # text: CellForeground
    background: '#434C5E'

  normal:
    black:   '#3B4252'
    red:     '#BF616A'
    green:   '#A3BE8C'
    # yellow:  '#D08770'
    yellow:  '#D0AE70'
    blue:    '#5E81AC'
    magenta: '#B48EAD'
    cyan:    '#88C0D0'
    white:   '#E5E9F0'

  bright:
    black:   '#4C566A'
    red:     '#D96F7A'
    green:   '#BBD9A0'
    yellow:  '#EBCB8B'
    blue:    '#81A1C1'
    magenta: '#CFA3C7'
    cyan:    '#92CFE0'
    white:   '#ECEFF4'

# # Default Nord
# colors:
#   primary:
#     background: '0x2E3440'
#     foreground: '0xD8DEE9'

#   normal:
#     black:   '0x3B4252'
#     red:     '0xBF616A'
#     green:   '0xA3BE8C'
#     yellow:  '0xEBCB8B'
#     blue:    '0x81A1C1'
#     magenta: '0xB48EAD'
#     cyan:    '0x88C0D0'
#     white:   '0xE5E9F0'

#   bright:
#     black:   '0x4C566A'
#     red:     '0xBF616A'
#     green:   '0xA3BE8C'
#     yellow:  '0xEBCB8B'
#     blue:    '0x81A1C1'
#     magenta: '0xB48EAD'
#     cyan:    '0x8FBCBB'
#     white:   '0xECEFF4'

# VGA
# colors:
#   primary:
#     background: '0x000000'
#     foreground: '0xffffff'

#   normal:
#     black: '0x000000'
#     red: '0xAA0000'
#     green: '0x00AA00'
#     yellow: '0xAA5500'
#     blue: '0x0000AA'
#     magenta: '0xAA00AA'
#     cyan: '0x00AAAA'
#     white: '0xAAAAAA'

#   bright:
#     black: '0x555555'
#     red: '0xFF5555'
#     green: '0x55FF55'
#     yellow: '0xFFFF55'
#     blue: '0x5555FF'
#     magenta: '0xFF55FF'
#     cyan: '0x55FFFF'
#     white: '0xFFFFFF'

# macOS Terminal
# colors:
#   primary:
#     background: '#2E3440'
#     foreground: '#D8DEE9'

#   normal:
#     black: '#000000'
#     red: '#C23621'
#     green: '#24bc24'
#     yellow: '#adad27'
#     blue: '#492ee1'
#     magenta: '#d338d3'
#     cyan: '#33bbc8'
#     white: '#bbbbbb'

#   bright:
#     black: '#818383'
#     red: '#fc391f'
#     green: '#32e722'
#     yellow: '#e9ec23'
#     blue: '#5833ff'
#     magenta: '#f935f9'
#     cyan: '#14f0f0'
#     white: '#e9ebeb'

# Key bindings
#
# Key bindings are specified as a list of objects. Each binding will specify a
# key and modifiers required to trigger it, terminal modes where the binding is
# applicable, and what should be done when the key binding fires. It can either
# send a byte sequence to the running application (`chars`), execute a
# predefined action (`action`) or fork and execute a specified command plus
# arguments (`command`).
#
# Bindings are always filled by default, but will be replaced when a new binding
# with the same triggers is defined. To unset a default binding, it can be
# mapped to the `None` action.
#
# Example:
#   `- { key: V, mods: Control|Shift, action: Paste }`
#
# Available fields:
#   - key
#   - mods (optional)
#   - chars | action | command (exactly one required)
#   - mode (optional)
#
# Values for `key`:
#   - `A` -> `Z`
#   - `F1` -> `F12`
#   - `Key1` -> `Key0`
#
#   A full list with available key codes can be found here:
#   https://docs.rs/glutin/*/glutin/enum.VirtualKeyCode.html#variants
#
#   Instead of using the name of the keys, the `key` field also supports using
#   the scancode of the desired key. Scancodes have to be specified as a
#   decimal number.
#   This command will allow you to display the hex scancodes for certain keys:
#     `showkey --scancodes`
#
# Values for `mods`:
#   - Command
#   - Control
#   - Super
#   - Shift
#   - Alt
#
#   Multiple `mods` can be combined using `|` like this: `mods: Control|Shift`.
#   Whitespace and capitalization is relevant and must match the example.
#
# Values for `chars`:
#   The `chars` field writes the specified string to the terminal. This makes
#   it possible to pass escape sequences.
#   To find escape codes for bindings like `PageUp` ("\x1b[5~"), you can run
#   the command `showkey -a` outside of tmux.
#   Note that applications use terminfo to map escape sequences back to
#   keys. It is therefore required to update the terminfo when
#   changing an escape sequence.
#
# Values for `action`:
#   - Paste
#   - PasteSelection
#   - Copy
#   - IncreaseFontSize
#   - DecreaseFontSize
#   - ResetFontSize
#   - ScrollPageUp
#   - ScrollPageDown
#   - ScrollLineUp
#   - ScrollLineDown
#   - ScrollToTop
#   - ScrollToBottom
#   - ClearHistory
#   - Hide
#   - Quit
#   - ClearLogNotice
#   - SpawnNewInstance
#   - None
#
# Values for `command`:
#   The `command` field must be a map containing a `program` string and
#   an `args` array of command line parameter strings.
#
#   Example:
#       `command: { program: "alacritty", args: ["-e", "vttest"] }`
#
# Values for `mode`:
#   - ~AppCursor
#   - AppCursor
#   - ~AppKeypad
#   - AppKeypad
key_bindings:
  - { key: N,         mods: Command,   action: SpawnNewInstance             }
  - { key: A,         mods: Alt,       chars: "\x1ba"                       }
  - { key: B,         mods: Alt,       chars: "\x1bb"                       }
  - { key: C,         mods: Alt,       chars: "\x1bc"                       }
  - { key: D,         mods: Alt,       chars: "\x1bd"                       }
  - { key: E,         mods: Alt,       chars: "\x1be"                       }
  - { key: F,         mods: Alt,       chars: "\x1bf"                       }
  - { key: G,         mods: Alt,       chars: "\x1bg"                       }
  - { key: H,         mods: Alt,       chars: "\x1bh"                       }
  - { key: I,         mods: Alt,       chars: "\x1bi"                       }
  - { key: J,         mods: Alt,       chars: "\x1bj"                       }
  - { key: K,         mods: Alt,       chars: "\x1bk"                       }
  - { key: L,         mods: Alt,       chars: "\x1bl"                       }
  - { key: M,         mods: Alt,       chars: "\x1bm"                       }
  - { key: N,         mods: Alt,       chars: "\x1bn"                       }
  - { key: O,         mods: Alt,       chars: "\x1bo"                       }
  - { key: P,         mods: Alt,       chars: "\x1bp"                       }
  - { key: Q,         mods: Alt,       chars: "\x1bq"                       }
  - { key: R,         mods: Alt,       chars: "\x1br"                       }
  - { key: S,         mods: Alt,       chars: "\x1bs"                       }
  - { key: T,         mods: Alt,       chars: "\x1bt"                       }
  - { key: U,         mods: Alt,       chars: "\x1bu"                       }
  - { key: V,         mods: Alt,       chars: "\x1bv"                       }
  - { key: W,         mods: Alt,       chars: "\x1bw"                       }
  - { key: X,         mods: Alt,       chars: "\x1bx"                       }
  - { key: Y,         mods: Alt,       chars: "\x1by"                       }
  - { key: Z,         mods: Alt,       chars: "\x1bz"                       }
  - { key: A,         mods: Alt|Shift, chars: "\x1bA"                       }
  - { key: B,         mods: Alt|Shift, chars: "\x1bB"                       }
  - { key: C,         mods: Alt|Shift, chars: "\x1bC"                       }
  - { key: D,         mods: Alt|Shift, chars: "\x1bD"                       }
  - { key: E,         mods: Alt|Shift, chars: "\x1bE"                       }
  - { key: F,         mods: Alt|Shift, chars: "\x1bF"                       }
  - { key: G,         mods: Alt|Shift, chars: "\x1bG"                       }
  - { key: H,         mods: Alt|Shift, chars: "\x1bH"                       }
  - { key: I,         mods: Alt|Shift, chars: "\x1bI"                       }
  - { key: J,         mods: Alt|Shift, chars: "\x1bJ"                       }
  - { key: K,         mods: Alt|Shift, chars: "\x1bK"                       }
  - { key: L,         mods: Alt|Shift, chars: "\x1bL"                       }
  - { key: M,         mods: Alt|Shift, chars: "\x1bM"                       }
  - { key: N,         mods: Alt|Shift, chars: "\x1bN"                       }
  - { key: O,         mods: Alt|Shift, chars: "\x1bO"                       }
  - { key: P,         mods: Alt|Shift, chars: "\x1bP"                       }
  - { key: Q,         mods: Alt|Shift, chars: "\x1bQ"                       }
  - { key: R,         mods: Alt|Shift, chars: "\x1bR"                       }
  - { key: S,         mods: Alt|Shift, chars: "\x1bS"                       }
  - { key: T,         mods: Alt|Shift, chars: "\x1bT"                       }
  - { key: U,         mods: Alt|Shift, chars: "\x1bU"                       }
  - { key: V,         mods: Alt|Shift, chars: "\x1bV"                       }
  - { key: W,         mods: Alt|Shift, chars: "\x1bW"                       }
  - { key: X,         mods: Alt|Shift, chars: "\x1bX"                       }
  - { key: Y,         mods: Alt|Shift, chars: "\x1bY"                       }
  - { key: Z,         mods: Alt|Shift, chars: "\x1bZ"                       }
